{
  "baseUrl": "https://developer.hashicorp.com",
  "path": "/",
  "id": ".documentation",
  "title": "Documentation",
  "description": null,
  "data": [
    {
      "path": "/terraform/language/resources/terraform-data",
      "id": "documentation.terraform_data",
      "title": "terraform_data",
      "description": "built-in resource",
      "data": null
    },
    {
      "baseUrl": "https://developer.hashicorp.com",
      "path": "/terraform/language/functions",
      "id": "documentation.functions",
      "title": "Functions",
      "description": "available terraform functions",
      "data": [
        {
          "path": "/terraform/language/functions",
          "id": "functions.numeric_functions",
          "title": "Numeric Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/abs",
              "id": "numeric_functions.abs",
              "title": "abs",
              "syntax": [
                "abs(number)"
              ],
              "description": "returns the absolute value of the given number.",
              "full": [
                "---",
                "page_title: abs - Functions - Configuration Language",
                "description: The abs function returns the absolute value of the given number.",
                "---",
                "",
                "# `abs` Function",
                "",
                "`abs` returns the absolute value of the given number. In other words, if the",
                "number is zero or positive then it is returned as-is, but if it is negative",
                "then it is multiplied by -1 to make it positive before returning it.",
                "",
                "## Examples",
                "",
                "```",
                "> abs(23)",
                "23",
                "> abs(0)",
                "0",
                "> abs(-12.4)",
                "12.4",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/ceil",
              "id": "numeric_functions.ceil",
              "title": "ceil",
              "syntax": [
                "ceil(number)"
              ],
              "description": "returns the closest whole number that is greater than or equal to the given value.",
              "full": [
                "---",
                "page_title: ceil - Functions - Configuration Language",
                "description: |-",
                "  The ceil function returns the closest whole number greater than or equal to",
                "  the given value.",
                "---",
                "",
                "# `ceil` Function",
                "",
                "`ceil` returns the closest whole number that is greater than or equal to the",
                "given value, which may be a fraction.",
                "",
                "## Examples",
                "",
                "```",
                "> ceil(5)",
                "5",
                "> ceil(5.1)",
                "6",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`floor`](/terraform/language/functions/floor), which rounds to the nearest whole number _less than_",
                "  or equal."
              ]
            },
            {
              "path": "/terraform/language/functions/floor",
              "id": "numeric_functions.floor",
              "title": "floor",
              "syntax": [
                "floor(number)"
              ],
              "description": "returns the closest whole number that is less than or equal to the given value.",
              "full": [
                "---",
                "page_title: floor - Functions - Configuration Language",
                "description: |-",
                "  The floor function returns the closest whole number less than or equal to",
                "  the given value.",
                "---",
                "",
                "# `floor` Function",
                "",
                "`floor` returns the closest whole number that is less than or equal to the",
                "given value, which may be a fraction.",
                "",
                "## Examples",
                "",
                "```",
                "> floor(5)",
                "5",
                "> floor(4.9)",
                "4",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`ceil`](/terraform/language/functions/ceil), which rounds to the nearest whole number _greater than_",
                "  or equal."
              ]
            },
            {
              "path": "/terraform/language/functions/log",
              "id": "numeric_functions.log",
              "title": "log",
              "syntax": [
                "log(number, base)"
              ],
              "description": "returns the logarithm of a given number in a given base.",
              "full": [
                "---",
                "page_title: log - Functions - Configuration Language",
                "description: The log function returns the logarithm of a given number in a given base.",
                "---",
                "",
                "# `log` Function",
                "",
                "`log` returns the logarithm of a given number in a given base.",
                "",
                "```hcl",
                "log(number, base)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> log(50, 10)",
                "1.6989700043360185",
                "> log(16, 2)",
                "4",
                "```",
                "",
                "`log` and `ceil` can be used together to find the minimum number of binary",
                "digits required to represent a given number of distinct values:",
                "",
                "```",
                "> ceil(log(15, 2))",
                "4",
                "> ceil(log(16, 2))",
                "4",
                "> ceil(log(17, 2))",
                "5",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/max",
              "id": "numeric_functions.max",
              "title": "max",
              "syntax": [
                "max(...numbers)",
                "max([number, number]...)"
              ],
              "description": "takes one or more numbers and returns the greatest number from the set.",
              "full": [
                "---",
                "page_title: max - Functions - Configuration Language",
                "description: The max function takes one or more numbers and returns the greatest number.",
                "---",
                "",
                "# `max` Function",
                "",
                "`max` takes one or more numbers and returns the greatest number from the set.",
                "",
                "## Examples",
                "",
                "```",
                "> max(12, 54, 3)",
                "54",
                "```",
                "",
                "If the numbers are in a list or set value, use `...` to expand the collection",
                "to individual arguments:",
                "",
                "```",
                "> max([12, 54, 3]...)",
                "54",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`min`](/terraform/language/functions/min), which returns the _smallest_ number from a set."
              ]
            },
            {
              "path": "/terraform/language/functions/min",
              "id": "numeric_functions.min",
              "title": "min",
              "syntax": [
                "min(...numbers)",
                "min([number, number]...)"
              ],
              "description": "takes one or more numbers and returns the smallest number from the set.",
              "full": [
                "---",
                "page_title: min - Functions - Configuration Language",
                "description: The min function takes one or more numbers and returns the smallest number.",
                "---",
                "",
                "# `min` Function",
                "",
                "`min` takes one or more numbers and returns the smallest number from the set.",
                "",
                "## Examples",
                "",
                "```",
                "> min(12, 54, 3)",
                "3",
                "```",
                "",
                "If the numbers are in a list or set value, use `...` to expand the collection",
                "to individual arguments:",
                "",
                "```",
                "> min([12, 54, 3]...)",
                "3",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`max`](/terraform/language/functions/max), which returns the _greatest_ number from a set."
              ]
            },
            {
              "path": "/terraform/language/functions/parseint",
              "id": "numeric_functions.parseint",
              "title": "parseint",
              "syntax": [
                "min(string, base)"
              ],
              "description": "parses the given string as a representation of an integer in he specified base and returns the resulting number.",
              "full": [
                "---",
                "page_title: parseint - Functions - Configuration Language",
                "description: >-",
                "  The parseint function parses the given string as a representation of an",
                "  integer.",
                "---",
                "",
                "# `parseint` Function",
                "",
                "`parseint` parses the given string as a representation of an integer in",
                "the specified base and returns the resulting number. The base must be between 2",
                "and 62 inclusive.",
                "",
                "All bases use the arabic numerals 0 through 9 first. Bases between 11 and 36",
                "inclusive use case-insensitive latin letters to represent higher unit values.",
                "Bases 37 and higher use lowercase latin letters and then uppercase latin",
                "letters.",
                "",
                "If the given string contains any non-digit characters or digit characters that",
                "are too large for the given base then `parseint` will produce an error.",
                "",
                "## Examples",
                "",
                "```",
                "> parseint(\"100\", 10)",
                "100",
                "",
                "> parseint(\"FF\", 16)",
                "255",
                "",
                "> parseint(\"-10\", 16)",
                "-16",
                "",
                "> parseint(\"1011111011101111\", 2)",
                "48879",
                "",
                "> parseint(\"aA\", 62)",
                "656",
                "",
                "> parseint(\"12\", 2)",
                "",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"number\" parameter: cannot parse \"12\" as a base 2 integer.",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`format`](/terraform/language/functions/format) can format numbers and other values into strings,",
                "  with optional zero padding, alignment, etc."
              ]
            },
            {
              "path": "/terraform/language/functions/pow",
              "id": "numeric_functions.pow",
              "title": "pow",
              "syntax": [
                "pow(number, exponent)"
              ],
              "description": "calculates an exponent, by raising its first argument to the power of the second argument.",
              "full": [
                "---",
                "page_title: pow - Functions - Configuration Language",
                "description: The pow function raises a number to a power.",
                "---",
                "",
                "# `pow` Function",
                "",
                "`pow` calculates an exponent, by raising its first argument to the power of the second argument.",
                "",
                "## Examples",
                "",
                "```",
                "> pow(3, 2)",
                "9",
                "> pow(4, 0)",
                "1",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/signum",
              "id": "numeric_functions.signum",
              "title": "signum",
              "syntax": [
                "signum(number)"
              ],
              "description": "determines the sign of a number, returning a number between -1 and 1 to represent the sign.",
              "full": [
                "---",
                "page_title: signum - Functions - Configuration Language",
                "description: The signum function determines the sign of a number.",
                "---",
                "",
                "# `signum` Function",
                "",
                "`signum` determines the sign of a number, returning a number between -1 and",
                "1 to represent the sign.",
                "",
                "## Examples",
                "",
                "```",
                "> signum(-13)",
                "-1",
                "> signum(0)",
                "0",
                "> signum(344)",
                "1",
                "```"
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.string_functions",
          "title": "String Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/chomp",
              "id": "string_functions.chomp",
              "title": "chomp",
              "syntax": [
                "chomp(string)"
              ],
              "description": "removes newline characters at the end of a string.",
              "full": [
                "---",
                "page_title: chomp - Functions - Configuration Language",
                "description: The chomp function removes newline characters at the end of a string.",
                "---",
                "",
                "# `chomp` Function",
                "",
                "`chomp` removes newline characters at the end of a string.",
                "",
                "This can be useful if, for example, the string was read from a file that has",
                "a newline character at the end.",
                "",
                "## Examples",
                "",
                "```",
                "> chomp(\"hello\\n\")",
                "hello",
                "> chomp(\"hello\\r\\n\")",
                "hello",
                "> chomp(\"hello\\n\\n\")",
                "hello",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`trimspace`](/terraform/language/functions/trimspace), which removes all types of whitespace from",
                "  both the start and the end of a string."
              ]
            },
            {
              "path": "/terraform/language/functions/endswith",
              "id": "string_functions.endswith",
              "title": "endswith",
              "syntax": [
                "endswith(string, suffix)"
              ],
              "description": "takes two values: a string to check and a suffix string. The function returns true if the first string ends with that exact suffix.",
              "full": [
                "---",
                "page_title: endswith - Functions - Configuration Language",
                "description: |-",
                "  The endswith function takes two values: a string to check and a suffix string. It returns true if the first string ends with that exact suffix.",
                "---",
                "",
                "# `endswith` Function",
                "",
                "`endswith` takes two values: a string to check and a suffix string. The function returns true if the first string ends with that exact suffix.",
                "",
                "```hcl",
                "endswith(string, suffix)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> endswith(\"hello world\", \"world\")",
                "true",
                "",
                "> endswith(\"hello world\", \"hello\")",
                "false",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`startswith`](/terraform/language/functions/startswith) takes two values: a string to check and a prefix string. The function returns true if the string begins with that exact prefix."
              ]
            },
            {
              "path": "/terraform/language/functions/format",
              "id": "string_functions.format",
              "title": "format",
              "syntax": [
                "format(string, ...values)"
              ],
              "description": "function produces a string by formatting a number of other values according according to a specification string.",
              "full": [
                "---",
                "page_title: format - Functions - Configuration Language",
                "description: |-",
                "  The format function produces a string by formatting a number of other values",
                "  according to a specification string.",
                "---",
                "",
                "# `format` Function",
                "",
                "The `format` function produces a string by formatting a number of other values according",
                "to a specification string. It is similar to the `printf` function in C, and",
                "other similar functions in other programming languages.",
                "",
                "```hcl",
                "format(spec, values...)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> format(\"Hello, %s!\", \"Ander\")",
                "Hello, Ander!",
                "> format(\"There are %d lights\", 4)",
                "There are 4 lights",
                "```",
                "",
                "Simple format verbs like `%s` and `%d` behave similarly to template",
                "interpolation syntax, which is often more readable.",
                "",
                "```",
                "> format(\"Hello, %s!\", var.name)",
                "Hello, Valentina!",
                "> \"Hello, ${var.name}!\"",
                "Hello, Valentina!",
                "```",
                "",
                "The formatting verb `%#v` accepts a value of any type and presents it using JSON encoding, similar to jsonencode. This can be useful for describing the values given to a module in [custom condition check](/terraform/language/expressions/custom-conditions#error-messages) error messages.",
                "",
                "```",
                "> format(\"%#v\", \"hello\")",
                "\"\\\"hello\\\"\"",
                "> format(\"%#v\", true)",
                "\"true\"",
                "> format(\"%#v\", 1)",
                "\"1\"",
                "> format(\"%#v\", {a = 1})",
                "\"{\\\"a\\\":1}\"",
                "> format(\"%#v\", [true])",
                "\"[true]\"",
                "> format(\"%#v\", null)",
                "\"null\"",
                "```",
                "",
                "The `format` function is most useful when you use more complex format specifications.",
                "",
                "## Specification Syntax",
                "",
                "The specification is a string that includes formatting verbs that are introduced",
                "with the `%` character. The function call must then have one additional argument",
                "for each verb sequence in the specification. The verbs are matched with",
                "consecutive arguments and formatted as directed, as long as each given argument",
                "is convertible to the type required by the format verb.",
                "",
                "By default, `%` sequences consume successive arguments starting with the first.",
                "Introducing a `[n]` sequence immediately before the verb letter, where `n` is a",
                "decimal integer, explicitly chooses a particular value argument by its",
                "one-based index. Subsequent calls without an explicit index will then proceed",
                "with `n`+1, `n`+2, etc.",
                "",
                "The function produces an error if the format string requests an impossible",
                "conversion or access more arguments than are given. An error is produced also",
                "for an unsupported format verb.",
                "",
                "### Verbs",
                "",
                "The specification may contain the following verbs.",
                "",
                "| Verb  | Result                                                                                    |",
                "| ----- | ----------------------------------------------------------------------------------------- |",
                "| `%%`  | Literal percent sign, consuming no value.                                                 |",
                "| `%v`  | Default formatting based on the [value type](#default-format-verbs). Accepts all types, including items of `null`, `list`, and `map` types.                           |",
                "| `%#v` | JSON serialization of the value, as with `jsonencode`. Accepts all types, including items of `null`, `list`, and `map` types.  |",
                "| `%t`  | Convert to boolean and produce `true` or `false`.                                         |",
                "| `%b`  | Convert to integer number and produce binary representation.                              |",
                "| `%d`  | Convert to integer number and produce decimal representation.                             |",
                "| `%o`  | Convert to integer number and produce octal representation.                               |",
                "| `%x`  | Convert to integer number and produce hexadecimal representation with lowercase letters.  |",
                "| `%X`  | Like `%x`, but use uppercase letters.                                                     |",
                "| `%e`  | Convert to number and produce scientific notation, like `-1.234456e+78`.                  |",
                "| `%E`  | Like `%e`, but use an uppercase `E` to introduce the exponent.                            |",
                "| `%f`  | Convert to number and produce decimal fraction notation with no exponent, like `123.456`. |",
                "| `%g`  | Like `%e` for large exponents or like `%f` otherwise.                                     |",
                "| `%G`  | Like `%E` for large exponents or like `%f` otherwise.                                     |",
                "| `%s`  | Convert to string and insert the string's characters.                                     |",
                "| `%q`  | Convert to string and produce a JSON quoted string representation.                        |",
                "",
                "### Default Format Verbs",
                "",
                "When `%v` is used, Terraform chooses the appropriate format verb based on the value type.",
                "",
                "| Type      | Verb  |",
                "| --------- | ----- |",
                "| `string`  | `%s`  |",
                "| `number`  | `%g`  |",
                "| `bool`    | `%t`  |",
                "| any other | `%#v` |",
                "",
                "Null values produce the string `null` if formatted with `%v` or `%#v`, and cause an error for other verbs.",
                "",
                "### Width Modifier",
                "",
                "Use a width modifier with an optional decimal number immediately",
                "preceding the verb letter to specify how many characters will be used to represent the value. You can specify precision after the (optional) width with a period (`.`) followed by a decimal number. If width or precision are omitted, Terraform selects default values based on the given value.",
                "",
                "The following examples demonstrate example use cases for the width modifier.",
                "",
                "| Sequence | Result                       |",
                "| -------- | ---------------------------- |",
                "| `%f`     | Default width and precision. |",
                "| `%9f`    | Width 9, default precision.  |",
                "| `%.2f`   | Default width, precision 2.  |",
                "| `%9.2f`  | Width 9, precision 2.        |",
                "",
                "-> **Note:** Width and precision modifiers with non-numeric types such as",
                "strings (`%s`) are interpreted differently. Setting either width or precision to",
                "zero is the same as not including them at all.",
                "",
                "### Additional Format Options",
                "",
                "Use the following symbols immediately after the `%` symbol to set additional formatting requirements.",
                "",
                "| Symbol | Result                                                         |",
                "| ------ | -------------------------------------------------------------- |",
                "| space  | Leave a space where the sign would be if a number is positive. |",
                "| `+`    | Show the sign of a number even if it is positive.              |",
                "| `-`    | Pad the width with spaces on the right rather than the left.   |",
                "| `0`    | Pad the width with leading zeros rather than spaces.           |",
                "",
                "",
                "## Related Functions",
                "",
                "* [`formatdate`](/terraform/language/functions/formatdate) is a specialized formatting function for",
                "  human-readable timestamps.",
                "* [`formatlist`](/terraform/language/functions/formatlist) uses the same specification syntax to",
                "  produce a list of strings."
              ]
            },
            {
              "path": "/terraform/language/functions/formatlist",
              "id": "string_functions.formatlist",
              "title": "formatlist",
              "syntax": [
                "formatlist(string, ...[value, value])"
              ],
              "description": "produces a list of strings by formatting a number of other values according to a specification string.",
              "full": [
                "---",
                "page_title: formatlist - Functions - Configuration Language",
                "description: |-",
                "  The formatlist function produces a list of strings by formatting a number of",
                "  other values according to a specification string.",
                "---",
                "",
                "# `formatlist` Function",
                "",
                "`formatlist` produces a list of strings by formatting a number of other",
                "values according to a specification string.",
                "",
                "```hcl",
                "formatlist(spec, values...)",
                "```",
                "",
                "The specification string uses",
                "[the same syntax as `format`](/terraform/language/functions/format#specification-syntax).",
                "",
                "The given values can be a mixture of list and non-list arguments. Any given",
                "lists must be the same length, which decides the length of the resulting list.",
                "",
                "The list arguments are iterated together in order by index, while the non-list",
                "arguments are used repeatedly for each iteration. The format string is evaluated",
                "once per element of the list arguments.",
                "",
                "## Examples",
                "",
                "```",
                "> formatlist(\"Hello, %s!\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])",
                "[",
                "  \"Hello, Valentina!\",",
                "  \"Hello, Ander!\",",
                "  \"Hello, Olivia!\",",
                "  \"Hello, Sam!\",",
                "]",
                "> formatlist(\"%s, %s!\", \"Salutations\", [\"Valentina\", \"Ander\", \"Olivia\", \"Sam\"])",
                "[",
                "  \"Salutations, Valentina!\",",
                "  \"Salutations, Ander!\",",
                "  \"Salutations, Olivia!\",",
                "  \"Salutations, Sam!\",",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`format`](/terraform/language/functions/format) defines the specification syntax used by this",
                "  function and produces a single string as its result."
              ]
            },
            {
              "path": "/terraform/language/functions/indent",
              "id": "string_functions.indent",
              "title": "indent",
              "syntax": [
                "indent(num_spaces, string)"
              ],
              "description": "adds a given number of spaces to the beginnings of all but the first line in a given multi-line string.",
              "full": [
                "---",
                "page_title: indent - Functions - Configuration Language",
                "description: |-",
                "  The indent function adds a number of spaces to the beginnings of all but the",
                "  first line of a given multi-line string.",
                "---",
                "",
                "# `indent` Function",
                "",
                "`indent` adds a given number of spaces to the beginnings of all but the first",
                "line in a given multi-line string.",
                "",
                "```hcl",
                "indent(num_spaces, string)",
                "```",
                "",
                "## Examples",
                "",
                "This function is useful for inserting a multi-line string into an",
                "already-indented context in another string:",
                "",
                "```",
                "> \"  items: ${indent(2, \"[\\n  foo,\\n  bar,\\n]\\n\")}\"",
                "  items: [",
                "    foo,",
                "    bar,",
                "  ]",
                "```",
                "",
                "The first line of the string is not indented so that, as above, it can be",
                "placed after an introduction sequence that has already begun the line."
              ]
            },
            {
              "path": "/terraform/language/functions/join",
              "id": "string_functions.join",
              "title": "join",
              "syntax": [
                "join(seperator, list)"
              ],
              "description": "produces a string by concatenating all of the elements of the specified ist of strings with the specified separator.",
              "full": [
                "---",
                "page_title: join - Functions - Configuration Language",
                "description: |-",
                "  The join function produces a string by concatenating the elements of a list",
                "  with a given delimiter.",
                "---",
                "",
                "# `join` Function",
                "",
                "`join` produces a string by concatenating all of the elements of the specified",
                "list of strings with the specified separator.",
                "",
                "```hcl",
                "join(separator, list)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> join(\"-\", [\"foo\", \"bar\", \"baz\"])",
                "\"foo-bar-baz\"",
                "> join(\", \", [\"foo\", \"bar\", \"baz\"])",
                "foo, bar, baz",
                "> join(\", \", [\"foo\"])",
                "foo",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`split`](/terraform/language/functions/split) performs the opposite operation: producing a list",
                "  by separating a single string using a given delimiter."
              ]
            },
            {
              "path": "/terraform/language/functions/lower",
              "id": "string_functions.lower",
              "title": "lower",
              "syntax": [
                "lower(string)"
              ],
              "description": "converts all cased letters in the given string to lowercase.",
              "full": [
                "---",
                "page_title: lower - Functions - Configuration Language",
                "description: >-",
                "  The lower function converts all cased letters in the given string to",
                "  lowercase.",
                "---",
                "",
                "# `lower` Function",
                "",
                "`lower` converts all cased letters in the given string to lowercase.",
                "",
                "## Examples",
                "",
                "```",
                "> lower(\"HELLO\")",
                "hello",
                "> lower(\"АЛЛО!\")",
                "алло!",
                "```",
                "",
                "This function uses Unicode's definition of letters and of upper- and lowercase.",
                "",
                "## Related Functions",
                "",
                "* [`upper`](/terraform/language/functions/upper) converts letters in a string to _uppercase_.",
                "* [`title`](/terraform/language/functions/title) converts the first letter of each word in a string to uppercase."
              ]
            },
            {
              "path": "/terraform/language/functions/regex",
              "id": "string_functions.regex",
              "title": "regex",
              "syntax": [
                "regex(pattern, string)"
              ],
              "description": "applies a regular expression to a string and returns the matching substrings.",
              "full": [
                "---",
                "page_title: regex - Functions - Configuration Language",
                "description: |-",
                "  The regex function applies a regular expression to a string and returns the",
                "  matching substrings.",
                "---",
                "",
                "# `regex` Function",
                "",
                "`regex` applies a",
                "[regular expression](https://en.wikipedia.org/wiki/Regular_expression)",
                "to a string and returns the matching substrings.",
                "",
                "```hcl",
                "regex(pattern, string)",
                "```",
                "",
                "The return type of `regex` depends on the capture groups, if any, in the",
                "pattern:",
                "",
                "- If the pattern has no capture groups at all, the result is a single string",
                "  covering the substring matched by the pattern as a whole.",
                "- If the pattern has one or more _unnamed_ capture groups, the result is a",
                "  list of the captured substrings in the same order as the definition of",
                "  the capture groups.",
                "- If the pattern has one or more _named_ capture groups, the result is a",
                "  map of the captured substrings, using the capture group names as map keys.",
                "",
                "It's not valid to mix both named and unnamed capture groups in the same pattern.",
                "",
                "If the given pattern does not match at all, the `regex` raises an error. To",
                "_test_ whether a given pattern matches a string, use",
                "[`regexall`](/terraform/language/functions/regexall) and test that the result has length greater than",
                "zero.",
                "",
                "The pattern is a string containing a mixture of literal characters and special",
                "matching operators as described in the following table. Note that when giving a",
                "regular expression pattern as a literal quoted string in the Terraform",
                "language, the quoted string itself already uses backslash `\\` as an escape",
                "character for the string, so any backslashes intended to be recognized as part",
                "of the pattern must be escaped as `\\\\`.",
                "",
                "| Sequence               | Matches                                                                          |",
                "| ---------------------- | -------------------------------------------------------------------------------- |",
                "| `.`                    | Any character except newline                                                     |",
                "| `[xyz]`                | Any character listed between the brackets (`x`, `y`, and `z` in this example)    |",
                "| `[a-z]`                | Any character between `a` and `z`, inclusive                                     |",
                "| `[^xyz]`               | The opposite of `[xyz]`                                                          |",
                "| `\\d`                   | ASCII digits (0 through 9, inclusive)                                            |",
                "| `\\D`                   | Anything except ASCII digits                                                     |",
                "| `\\s`                   | ASCII spaces (space, tab, newline, carriage return, form feed)                   |",
                "| `\\S`                   | Anything except ASCII spaces                                                     |",
                "| `\\w`                   | The same as `[0-9A-Za-z_]`                                                       |",
                "| `\\W`                   | Anything except the characters matched by `\\w`                                   |",
                "| `[[:alnum:]]`          | The same as `[0-9A-Za-z]`                                                        |",
                "| `[[:alpha:]]`          | The same as `[A-Za-z]`                                                           |",
                "| `[[:ascii:]]`          | Any ASCII character                                                              |",
                "| `[[:blank:]]`          | ASCII tab or space                                                               |",
                "| `[[:cntrl:]]`          | ASCII/Unicode control characters                                                 |",
                "| `[[:digit:]]`          | The same as `[0-9]`                                                              |",
                "| `[[:graph:]]`          | All \"graphical\" (printable) ASCII characters                                     |",
                "| `[[:lower:]]`          | The same as `[a-z]`                                                              |",
                "| `[[:print:]]`          | The same as `[[:graph:]]`                                                        |",
                "| `[[:punct:]]`          | The same as ``[!-/:-@[-`{-~]``                                                   |",
                "| `[[:space:]]`          | The same as `[\\t\\n\\v\\f\\r ]`                                                      |",
                "| `[[:upper:]]`          | The same as `[A-Z]`                                                              |",
                "| `[[:word:]]`           | The same as `\\w`                                                                 |",
                "| `[[:xdigit:]]`         | The same as `[0-9A-Fa-f]`                                                        |",
                "| `\\pN`                  | Unicode character class by using single-letter class names (\"N\" in this example) |",
                "| `\\p{Greek}`            | Unicode character class by unicode name (\"Greek\" in this example)                |",
                "| `\\PN`                  | The opposite of `\\pN`                                                            |",
                "| `\\P{Greek}`            | The opposite of `\\p{Greek}`                                                      |",
                "| `xy`                   | `x` followed immediately by `y`                                                  |",
                "| `x&#124;y`             | either `x` or `y`, preferring `x`                                                |",
                "| `x*`                   | zero or more `x`, preferring more                                                |",
                "| `x*?`                  | zero or more `x`, preferring fewer                                               |",
                "| `x+`                   | one or more `x`, preferring more                                                 |",
                "| `x+?`                  | one or more `x`, preferring fewer                                                |",
                "| `x?`                   | zero or one `x`, preferring one                                                  |",
                "| `x??`                  | zero or one `x`, preferring zero                                                 |",
                "| `x{n,m}`               | between `n` and `m` repetitions of `x`, preferring more                          |",
                "| `x{n,m}?`              | between `n` and `m` repetitions of `x`, preferring fewer                         |",
                "| `x{n,}`                | at least `n` repetitions of `x`, preferring more                                 |",
                "| `x{n,}?`               | at least `n` repetitions of `x`, preferring fewer                                |",
                "| `x{n}`                 | exactly `n` repetitions of `x`                                                   |",
                "| `(x)`                  | unnamed capture group for sub-pattern `x`                                        |",
                "| `(?P<name>x)`          | named capture group, named `name`, for sub-pattern `x`                           |",
                "| `(?:x)`                | non-capturing sub-pattern `x`                                                    |",
                "| `\\*`                   | Literal `*` for any punctuation character `*`                                    |",
                "| `\\Q...\\E`              | Literal `...` for any text `...` as long as it does not include literally `\\E`   |",
                "",
                "In addition to the above matching operators that consume the characters they",
                "match, there are some additional operators that _only_ match, but consume",
                "no characters. These are \"zero-width\" matching operators:",
                "",
                "| Sequence | Matches                                                                                          |",
                "| -------- | ------------------------------------------------------------------------------------------------ |",
                "| `^`      | At the beginning of the given string                                                             |",
                "| `$`      | At the end of the given string                                                                   |",
                "| `\\A`     | At the beginning of the given string                                                             |",
                "| `\\z`     | At the end of the given string                                                                   |",
                "| `\\b`     | At an ASCII word boundary (transition between `\\w` and either `\\W`, `\\A` or `\\z`, or vice-versa) |",
                "| `\\B`     | Not at an ASCII word boundary                                                                    |",
                "",
                "Terraform uses the",
                "[RE2](https://github.com/google/re2/wiki/Syntax) regular expression language.",
                "This engine does not support all of the features found in some other regular",
                "expression engines; in particular, it does not support backreferences.",
                "",
                "## Matching Flags",
                "",
                "Some of the matching behaviors described above can be modified by setting",
                "matching flags, activated using either the `(?flags)` operator (to activate",
                "within the current sub-pattern) or the `(?flags:x)` operator (to match `x` with",
                "the modified flags). Each flag is a single letter, and multiple flags can be",
                "set at once by listing multiple letters in the `flags` position.",
                "The available flags are listed in the table below:",
                "",
                "| Flag | Meaning                                                                                                                                                     |",
                "| ---- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |",
                "| `i`  | Case insensitive: a literal letter in the pattern matches both lowercase and uppercase versions of that letter                                              |",
                "| `m`  | The `^` and `$` operators also match the beginning and end of lines within the string, marked by newline characters; behavior of `\\A` and `\\z` is unchanged |",
                "| `s`  | The `.` operator also matches newline                                                                                                                       |",
                "| `U`  | The meaning of presence or absense `?` after a repetition operator is inverted. For example, `x*` is interpreted like `x*?` and vice-versa.                 |",
                "",
                "## Examples",
                "",
                "```",
                "> regex(\"[a-z]+\", \"53453453.345345aaabbbccc23454\")",
                "aaabbbccc",
                "",
                "> regex(\"(\\\\d\\\\d\\\\d\\\\d)-(\\\\d\\\\d)-(\\\\d\\\\d)\", \"2019-02-01\")",
                "[",
                "  \"2019\",",
                "  \"02\",",
                "  \"01\",",
                "]",
                "",
                "> regex(\"^(?:(?P<scheme>[^:/?#]+):)?(?://(?P<authority>[^/?#]*))?\", \"https://terraform.io/docs/\")",
                "{",
                "  \"authority\" = \"terraform.io\"",
                "  \"scheme\" = \"https\"",
                "}",
                "",
                "> regex(\"[a-z]+\", \"53453453.34534523454\")",
                "",
                "Error: Error in function call",
                "",
                "Call to function \"regex\" failed: pattern did not match any part of the given",
                "string.",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`regexall`](/terraform/language/functions/regexall) searches for potentially multiple matches of a given pattern in a string.",
                "- [`replace`](/terraform/language/functions/replace) replaces a substring of a string with another string, optionally matching using the same regular expression syntax as `regex`.",
                "",
                "If Terraform already has a more specialized function to parse the syntax you",
                "are trying to match, prefer to use that function instead. Regular expressions",
                "can be hard to read and can obscure your intent, making a configuration harder",
                "to read and understand."
              ]
            },
            {
              "path": "/terraform/language/functions/regexall",
              "id": "string_functions.regexall",
              "title": "regexall",
              "syntax": [
                "regexall(pattern, string)"
              ],
              "description": "applies a regular expression to a string and returns a list of all matches.",
              "full": [
                "---",
                "page_title: regexall - Functions - Configuration Language",
                "description: >-",
                "  The regex function applies a regular expression to a string and returns a list",
                "  of all matches.",
                "---",
                "",
                "# `regexall` Function",
                "",
                "`regexall` applies a",
                "[regular expression](https://en.wikipedia.org/wiki/Regular_expression)",
                "to a string and returns a list of all matches.",
                "",
                "```hcl",
                "regexall(pattern, string)",
                "```",
                "",
                "`regexall` is a variant of [`regex`](/terraform/language/functions/regex) and uses the same pattern",
                "syntax. For any given input to `regex`, `regexall` returns a list of whatever",
                "type `regex` would've returned, with one element per match. That is:",
                "",
                "- If the pattern has no capture groups at all, the result is a list of",
                "  strings.",
                "- If the pattern has one or more _unnamed_ capture groups, the result is a",
                "  list of lists.",
                "- If the pattern has one or more _named_ capture groups, the result is a",
                "  list of maps.",
                "",
                "`regexall` can also be used to test whether a particular string matches a",
                "given pattern, by testing whether the length of the resulting list of matches",
                "is greater than zero.",
                "",
                "## Examples",
                "",
                "```",
                "> regexall(\"[a-z]+\", \"1234abcd5678efgh9\")",
                "[",
                "  \"abcd\",",
                "  \"efgh\",",
                "]",
                "",
                "> length(regexall(\"[a-z]+\", \"1234abcd5678efgh9\"))",
                "2",
                "",
                "> length(regexall(\"[a-z]+\", \"123456789\")) > 0",
                "false",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`regex`](/terraform/language/functions/regex) searches for a single match of a given pattern, and",
                "  returns an error if no match is found.",
                "",
                "If Terraform already has a more specialized function to parse the syntax you",
                "are trying to match, prefer to use that function instead. Regular expressions",
                "can be hard to read and can obscure your intent, making a configuration harder",
                "to read and understand."
              ]
            },
            {
              "path": "/terraform/language/functions/replace",
              "id": "string_functions.replace",
              "title": "replace",
              "syntax": [
                "replace(string, substring, replacement)"
              ],
              "description": "searches a given string for another given substring, and replaces all occurrences with a given replacement string.",
              "full": [
                "---",
                "page_title: replace - Functions - Configuration Language",
                "description: |-",
                "  The replace function searches a given string for another given substring,",
                "  and replaces all occurrences with a given replacement string.",
                "---",
                "",
                "# `replace` Function",
                "",
                "`replace` searches a given string for another given substring, and replaces",
                "each occurrence with a given replacement string.",
                "",
                "```hcl",
                "replace(string, substring, replacement)",
                "```",
                "",
                "If `substring` is wrapped in forward slashes, it is treated as a regular",
                "expression, using the same pattern syntax as",
                "[`regex`](/terraform/language/functions/regex). If using a regular expression for the substring",
                "argument, the `replacement` string can incorporate captured strings from",
                "the input by using an `$n` sequence, where `n` is the index or name of a",
                "capture group.",
                "",
                "## Examples",
                "",
                "```",
                "> replace(\"1 + 2 + 3\", \"+\", \"-\")",
                "1 - 2 - 3",
                "",
                "> replace(\"hello world\", \"/w.*d/\", \"everybody\")",
                "hello everybody",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`regex`](/terraform/language/functions/regex) searches a given string for a substring matching a",
                "  given regular expression pattern."
              ]
            },
            {
              "path": "/terraform/language/functions/split",
              "id": "string_functions.split",
              "title": "split",
              "syntax": [
                "split(separator, string)"
              ],
              "description": "produces a list by dividing a given string at all occurrences of a given separator.",
              "full": [
                "---",
                "page_title: split - Functions - Configuration Language",
                "description: |-",
                "  The split function produces a list by dividing a given string at all",
                "  occurrences of a given separator.",
                "---",
                "",
                "# `split` Function",
                "",
                "`split` produces a list by dividing a given string at all occurrences of a",
                "given separator.",
                "",
                "```hcl",
                "split(separator, string)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> split(\",\", \"foo,bar,baz\")",
                "[",
                "  \"foo\",",
                "  \"bar\",",
                "  \"baz\",",
                "]",
                "> split(\",\", \"foo\")",
                "[",
                "  \"foo\",",
                "]",
                "> split(\",\", \"\")",
                "[",
                "  \"\",",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`join`](/terraform/language/functions/join) performs the opposite operation: producing a string",
                "  joining together a list of strings with a given separator."
              ]
            },
            {
              "path": "/terraform/language/functions/startswith",
              "id": "string_functions.startswith",
              "title": "startswith",
              "syntax": [
                "startswith(string, prefix)"
              ],
              "description": "takes two values: a string to check and a prefix string. The function returns true if the string begins with that exact prefix.",
              "full": [
                "---",
                "page_title: startswith - Functions - Configuration Language",
                "description: |-",
                "  The startswith function  takes two values: a string to check and a prefix string. It returns true if the string begins with that exact prefix.",
                "---",
                "",
                "# `startswith` Function",
                "",
                "`startswith` takes two values: a string to check and a prefix string. The function returns true if the string begins with that exact prefix.",
                "",
                "```hcl",
                "startswith(string, prefix)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> startswith(\"hello world\", \"hello\")",
                "true",
                "",
                "> startswith(\"hello world\", \"world\")",
                "false",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`endswith`](/terraform/language/functions/endswith) takes two values: a string to check and a suffix string. The function returns true if the first string ends with that exact suffix."
              ]
            },
            {
              "path": "/terraform/language/functions/strrev",
              "id": "string_functions.strrev",
              "title": "strrev",
              "syntax": [
                "strrev(string)"
              ],
              "description": "reverses the characters in a string.",
              "full": [
                "---",
                "page_title: strrev - Functions - Configuration Language",
                "description: The strrev function reverses a string.",
                "---",
                "",
                "# `strrev` Function",
                "",
                "`strrev` reverses the characters in a string.",
                "Note that the characters are treated as _Unicode characters_ (in technical terms, Unicode [grapheme cluster boundaries](https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries) are respected).",
                "",
                "```hcl",
                "strrev(string)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> strrev(\"hello\")",
                "olleh",
                "> strrev(\"a ☃\")",
                "☃ a",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`reverse`](/terraform/language/functions/reverse) reverses a sequence."
              ]
            },
            {
              "path": "/terraform/language/functions/substr",
              "id": "string_functions.substr",
              "title": "substr",
              "syntax": [
                "substr(string, offset, length)"
              ],
              "description": "extracts a substring from a given string by offset and (maximum) length.",
              "full": [
                "---",
                "page_title: substr - Functions - Configuration Language",
                "description: |-",
                "  The substr function extracts a substring from a given string by offset and",
                "  length.",
                "---",
                "",
                "# `substr` Function",
                "",
                "`substr` extracts a substring from a given string by offset and (maximum) length.",
                "",
                "```hcl",
                "substr(string, offset, length)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> substr(\"hello world\", 1, 4)",
                "ello",
                "```",
                "",
                "The offset and length are both counted in _unicode characters_ rather than",
                "bytes:",
                "",
                "```",
                "> substr(\"🤔🤷\", 0, 1)",
                "🤔",
                "```",
                "",
                "The offset index may be negative, in which case it is relative to the end of",
                "the given string.  The length may be -1, in which case the remainder of the",
                "string after the given offset will be returned.",
                "",
                "```",
                "> substr(\"hello world\", -5, -1)",
                "world",
                "```",
                "",
                "If the length is greater than the length of the string, the substring",
                "will be the length of all remaining characters.",
                "",
                "```",
                "> substr(\"hello world\", 6, 10)",
                "world",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/title",
              "id": "string_functions.title",
              "title": "title",
              "syntax": [
                "title(string)"
              ],
              "description": "converts the first letter of each word in the given string to uppercase.",
              "full": [
                "---",
                "page_title: title - Functions - Configuration Language",
                "description: |-",
                "  The title function converts the first letter of each word in a given string",
                "  to uppercase.",
                "---",
                "",
                "# `title` Function",
                "",
                "`title` converts the first letter of each word in the given string to uppercase.",
                "",
                "## Examples",
                "",
                "```",
                "> title(\"hello world\")",
                "Hello World",
                "```",
                "",
                "This function uses Unicode's definition of letters and of upper- and lowercase.",
                "",
                "## Related Functions",
                "",
                "* [`upper`](/terraform/language/functions/upper) converts _all_ letters in a string to uppercase.",
                "* [`lower`](/terraform/language/functions/lower) converts all letters in a string to lowercase."
              ]
            },
            {
              "path": "/terraform/language/functions/trim",
              "id": "string_functions.trim",
              "title": "trim",
              "syntax": [
                "trim(string, characters)"
              ],
              "description": "removes the specified set of characters from the start and end of the given string.",
              "full": [
                "---",
                "page_title: trim - Functions - Configuration Language",
                "description: >-",
                "  The trim function removes the specified set of characters from the start and",
                "  end of",
                "",
                "  a given string.",
                "---",
                "",
                "# `trim` Function",
                "",
                "`trim` removes the specified set of characters from the start and end of the given",
                "string.",
                "",
                "```hcl",
                "trim(string, str_character_set)",
                "```",
                "",
                "Every occurrence of a character in the second argument is removed from the start",
                "and end of the string specified in the first argument.",
                "",
                "## Examples",
                "",
                "```",
                "> trim(\"?!hello?!\", \"!?\")",
                "\"hello\"",
                "",
                "> trim(\"foobar\", \"far\")",
                "\"oob\"",
                "",
                "> trim(\"   hello! world.!  \", \"! \")",
                "\"hello! world.\"",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`trimprefix`](/terraform/language/functions/trimprefix) removes a word from the start of a string.",
                "* [`trimsuffix`](/terraform/language/functions/trimsuffix) removes a word from the end of a string.",
                "* [`trimspace`](/terraform/language/functions/trimspace) removes all types of whitespace from",
                "  both the start and the end of a string."
              ]
            },
            {
              "path": "/terraform/language/functions/trimprefix",
              "id": "string_functions.trimprefix",
              "title": "trimprefix",
              "syntax": [
                "trimprefix(string, prefix)"
              ],
              "description": "removes the specified prefix from the start of the given string. If the string does not start with the prefix, the string is returned unchanged.",
              "full": [
                "---",
                "page_title: trimprefix - Functions - Configuration Language",
                "description: |-",
                "  The trimprefix function removes the specified prefix from the start of a",
                "  given string.",
                "---",
                "",
                "# `trimprefix` Function",
                "",
                "`trimprefix` removes the specified prefix from the start of the given string. If the string does not start with the prefix, the string is returned unchanged.",
                "",
                "## Examples",
                "",
                "```",
                "> trimprefix(\"helloworld\", \"hello\")",
                "world",
                "```",
                "",
                "```",
                "> trimprefix(\"helloworld\", \"cat\")",
                "helloworld",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`trim`](/terraform/language/functions/trim) removes characters at the start and end of a string.",
                "* [`trimsuffix`](/terraform/language/functions/trimsuffix) removes a word from the end of a string.",
                "* [`trimspace`](/terraform/language/functions/trimspace) removes all types of whitespace from",
                "  both the start and the end of a string."
              ]
            },
            {
              "path": "/terraform/language/functions/trimsuffix",
              "id": "string_functions.trimsuffix",
              "title": "trimsuffix",
              "syntax": [
                "trimsuffix(string, suffix)"
              ],
              "description": "removes the specified suffix from the end of the given string.",
              "full": [
                "---",
                "page_title: trimsuffix - Functions - Configuration Language",
                "description: |-",
                "  The trimsuffix function removes the specified suffix from the end of a",
                "  given string.",
                "---",
                "",
                "# `trimsuffix` Function",
                "",
                "`trimsuffix` removes the specified suffix from the end of the given string.",
                "",
                "## Examples",
                "",
                "```",
                "> trimsuffix(\"helloworld\", \"world\")",
                "hello",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`trim`](/terraform/language/functions/trim) removes characters at the start and end of a string.",
                "* [`trimprefix`](/terraform/language/functions/trimprefix) removes a word from the start of a string.",
                "* [`trimspace`](/terraform/language/functions/trimspace) removes all types of whitespace from",
                "  both the start and the end of a string."
              ]
            },
            {
              "path": "/terraform/language/functions/trimspace",
              "id": "string_functions.trimspace",
              "title": "trimspace",
              "syntax": [
                "trimspace(string)"
              ],
              "description": "removes any space characters from the start and end of the given string.",
              "full": [
                "---",
                "page_title: trimspace - Functions - Configuration Language",
                "description: |-",
                "  The trimspace function removes space characters from the start and end of",
                "  a given string.",
                "---",
                "",
                "# `trimspace` Function",
                "",
                "`trimspace` removes any space characters from the start and end of the given",
                "string.",
                "",
                "This function follows the Unicode definition of \"space\", which includes",
                "regular spaces, tabs, newline characters, and various other space-like",
                "characters.",
                "",
                "## Examples",
                "",
                "```",
                "> trimspace(\"  hello\\n\\n\")",
                "hello",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`chomp`](/terraform/language/functions/chomp) removes just line ending characters from the _end_ of",
                "  a string."
              ]
            },
            {
              "path": "/terraform/language/functions/upper",
              "id": "string_functions.upper",
              "title": "upper",
              "syntax": [
                "upper(string)"
              ],
              "description": "converts all cased letters in the given string to uppercase.",
              "full": [
                "---",
                "page_title: upper - Functions - Configuration Language",
                "description: >-",
                "  The upper function converts all cased letters in the given string to",
                "  uppercase.",
                "---",
                "",
                "# `upper` Function",
                "",
                "`upper` converts all cased letters in the given string to uppercase.",
                "",
                "## Examples",
                "",
                "```",
                "> upper(\"hello\")",
                "HELLO",
                "> upper(\"алло!\")",
                "АЛЛО!",
                "```",
                "",
                "This function uses Unicode's definition of letters and of upper- and lowercase.",
                "",
                "## Related Functions",
                "",
                "* [`lower`](/terraform/language/functions/lower) converts letters in a string to _lowercase_.",
                "* [`title`](/terraform/language/functions/title) converts the first letter of each word in a string to uppercase."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.collection_functions",
          "title": "Collection Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/alltrue",
              "id": "collection_functions.alltrue",
              "title": "alltrue",
              "syntax": [
                "alltrue(list)"
              ],
              "description": "returns `true` if all elements in a given collection are `true` or `\"true\"`.",
              "full": [
                "---",
                "page_title: alltrue - Functions - Configuration Language",
                "description: |-",
                "  The alltrue function determines whether all elements of a collection",
                "  are true or \"true\". If the collection is empty, it returns true.",
                "---",
                "",
                "# `alltrue` Function",
                "",
                "-> **Note:** This function is available in Terraform 0.14 and later.",
                "",
                "`alltrue` returns `true` if all elements in a given collection are `true`",
                "or `\"true\"`. It also returns `true` if the collection is empty.",
                "",
                "```hcl",
                "alltrue(list)",
                "```",
                "",
                "## Examples",
                "",
                "```command",
                "> alltrue([\"true\", true])",
                "true",
                "> alltrue([true, false])",
                "false",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/anytrue",
              "id": "collection_functions.anytrue",
              "title": "anytrue",
              "syntax": [
                "anytrue(list)"
              ],
              "description": "returns `true` if any element in a given collection is `true` or \"true\".",
              "full": [
                "---",
                "page_title: anytrue - Functions - Configuration Language",
                "description: |-",
                "  The anytrue function determines whether any element of a collection",
                "  is true or \"true\". If the collection is empty, it returns false.",
                "---",
                "",
                "# `anytrue` Function",
                "",
                "-> **Note:** This function is available in Terraform 0.14 and later.",
                "",
                "`anytrue` returns `true` if any element in a given collection is `true`",
                "or `\"true\"`. It also returns `false` if the collection is empty.",
                "",
                "```hcl",
                "anytrue(list)",
                "```",
                "",
                "## Examples",
                "",
                "```command",
                "> anytrue([\"true\"])",
                "true",
                "> anytrue([true])",
                "true",
                "> anytrue([true, false])",
                "true",
                "> anytrue([])",
                "false",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/chunklist",
              "id": "collection_functions.chunklist",
              "title": "chunklist",
              "syntax": [
                "chunklist(list, chunk_size)"
              ],
              "description": "splits a single list into fixed-size chunks, returning a list of lists.",
              "full": [
                "---",
                "page_title: chunklist - Functions - Configuration Language",
                "description: |-",
                "  The chunklist function splits a single list into fixed-size chunks, returning",
                "  a list of lists.",
                "---",
                "",
                "# `chunklist` Function",
                "",
                "`chunklist` splits a single list into fixed-size chunks, returning a list",
                "of lists.",
                "",
                "```hcl",
                "chunklist(list, chunk_size)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 2)",
                "[",
                "  [",
                "    \"a\",",
                "    \"b\",",
                "  ],",
                "  [",
                "    \"c\",",
                "    \"d\",",
                "  ],",
                "  [",
                "    \"e\",",
                "  ],",
                "]",
                "> chunklist([\"a\", \"b\", \"c\", \"d\", \"e\"], 1)",
                "[",
                "  [",
                "    \"a\",",
                "  ],",
                "  [",
                "    \"b\",",
                "  ],",
                "  [",
                "    \"c\",",
                "  ],",
                "  [",
                "    \"d\",",
                "  ],",
                "  [",
                "    \"e\",",
                "  ],",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/coalesce",
              "id": "collection_functions.coalesce",
              "title": "coalesce",
              "syntax": [
                "coalesce(...values)",
                "coalesce([value, value]...)"
              ],
              "description": "takes any number of arguments and returns the first one that isn't null or an empty string.",
              "full": [
                "---",
                "page_title: coalesce - Functions - Configuration Language",
                "description: |-",
                "  The coalesce function takes any number of arguments and returns the",
                "  first one that isn't null nor empty.",
                "---",
                "",
                "# `coalesce` Function",
                "",
                "`coalesce` takes any number of arguments and returns the first one",
                "that isn't null or an empty string.",
                "",
                "All of the arguments must be of the same type. Terraform will try to",
                "convert mismatched arguments to the most general of the types that all",
                "arguments can convert to, or return an error if the types are incompatible.",
                "The result type is the same as the type of all of the arguments.",
                "",
                "## Examples",
                "",
                "```",
                "> coalesce(\"a\", \"b\")",
                "a",
                "> coalesce(\"\", \"b\")",
                "b",
                "> coalesce(1,2)",
                "1",
                "```",
                "",
                "To perform the `coalesce` operation with a list of strings, use the `...`",
                "symbol to expand the list as arguments:",
                "",
                "```",
                "> coalesce([\"\", \"b\"]...)",
                "b",
                "```",
                "",
                "Terraform attempts to select a result type that all of the arguments can",
                "convert to, so mixing argument types may produce surprising results due to",
                "Terraform's automatic type conversion rules:",
                "",
                "```",
                "> coalesce(1, \"hello\")",
                "\"1\"",
                "> coalesce(true, \"hello\")",
                "\"true\"",
                "> coalesce({}, \"hello\")",
                "",
                "Error: Error in function call",
                "",
                "Call to function \"coalesce\" failed: all arguments must have the same type.",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`coalescelist`](/terraform/language/functions/coalescelist) performs a similar operation with",
                "  list arguments rather than individual arguments."
              ]
            },
            {
              "path": "/terraform/language/functions/coalescelist",
              "id": "collection_functions.coalescelist",
              "title": "coalescelist",
              "syntax": [
                "coalescelist(...lists)"
              ],
              "description": "takes any number of list arguments and returns the first one that isn't empty.",
              "full": [
                "---",
                "page_title: coalescelist - Functions - Configuration Language",
                "description: |-",
                "  The coalescelist function takes any number of list arguments and returns the",
                "  first one that isn't empty.",
                "---",
                "",
                "# `coalescelist` Function",
                "",
                "`coalescelist` takes any number of list arguments and returns the first one",
                "that isn't empty.",
                "",
                "## Examples",
                "",
                "```",
                "> coalescelist([\"a\", \"b\"], [\"c\", \"d\"])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "]",
                "> coalescelist([], [\"c\", \"d\"])",
                "[",
                "  \"c\",",
                "  \"d\",",
                "]",
                "```",
                "",
                "To perform the `coalescelist` operation with a list of lists, use the `...`",
                "symbol to expand the outer list as arguments:",
                "",
                "```",
                "> coalescelist([[], [\"c\", \"d\"]]...)",
                "[",
                "  \"c\",",
                "  \"d\",",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`coalesce`](/terraform/language/functions/coalesce) performs a similar operation with string",
                "  arguments rather than list arguments."
              ]
            },
            {
              "path": "/terraform/language/functions/compact",
              "id": "collection_functions.compact",
              "title": "compact",
              "syntax": [
                "compact(list)"
              ],
              "description": "takes a list of strings and returns a new list with any null or empty string elements removed.",
              "full": [
                "---",
                "page_title: compact - Functions - Configuration Language",
                "description: The compact function removes null or empty string elements from a list.",
                "---",
                "",
                "# `compact` Function",
                "",
                "`compact` takes a list of strings and returns a new list with any null or empty string",
                "elements removed.",
                "",
                "## Examples",
                "",
                "```",
                "> compact([\"a\", \"\", \"b\", null, \"c\"])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/concat",
              "id": "collection_functions.concat",
              "title": "concat",
              "syntax": [
                "concat(list, ...lists)"
              ],
              "description": "takes two or more lists and combines them into a single list.",
              "full": [
                "---",
                "page_title: concat - Functions - Configuration Language",
                "description: The concat function combines two or more lists into a single list.",
                "---",
                "",
                "# `concat` Function",
                "",
                "`concat` takes two or more lists and combines them into a single list.",
                "",
                "## Examples",
                "",
                "```",
                "> concat([\"a\", \"\"], [\"b\", \"c\"])",
                "[",
                "  \"a\",",
                "  \"\",",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/contains",
              "id": "collection_functions.contains",
              "title": "contains",
              "syntax": [
                "contains(list, value)"
              ],
              "description": "determines whether a given list or set contains a given single value as one of its elements.",
              "full": [
                "---",
                "page_title: contains - Functions - Configuration Language",
                "description: The contains function determines whether a list or set contains a given value.",
                "---",
                "",
                "# `contains` Function",
                "",
                "`contains` determines whether a given list or set contains a given single value",
                "as one of its elements.",
                "",
                "```hcl",
                "contains(list, value)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> contains([\"a\", \"b\", \"c\"], \"a\")",
                "true",
                "> contains([\"a\", \"b\", \"c\"], \"d\")",
                "false",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/distinct",
              "id": "collection_functions.distinct",
              "title": "distinct",
              "syntax": [
                "distinct(list)"
              ],
              "description": "takes a list and returns a new list with any duplicate elements removed.",
              "full": [
                "---",
                "page_title: distinct - Functions - Configuration Language",
                "description: The distinct function removes duplicate elements from a list.",
                "---",
                "",
                "# `distinct` Function",
                "",
                "`distinct` takes a list and returns a new list with any duplicate elements",
                "removed.",
                "",
                "The first occurrence of each value is retained and the relative ordering of",
                "these elements is preserved.",
                "",
                "## Examples",
                "",
                "```",
                "> distinct([\"a\", \"b\", \"a\", \"c\", \"d\", \"b\"])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "  \"c\",",
                "  \"d\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/element",
              "id": "collection_functions.element",
              "title": "element",
              "syntax": [
                "element(list, index)"
              ],
              "description": "retrieves a single element from a list.",
              "full": [
                "---",
                "page_title: element - Functions - Configuration Language",
                "description: The element function retrieves a single element from a list.",
                "---",
                "",
                "# `element` Function",
                "",
                "`element` retrieves a single element from a list.",
                "",
                "```hcl",
                "element(list, index)",
                "```",
                "",
                "The index is zero-based. This function produces an error if used with an",
                "empty list. The index must be a non-negative integer.",
                "",
                "Use the built-in index syntax `list[index]` in most cases. Use this function",
                "only for the special additional \"wrap-around\" behavior described below.",
                "",
                "## Examples",
                "",
                "```",
                "> element([\"a\", \"b\", \"c\"], 1)",
                "b",
                "```",
                "",
                "If the given index is greater than the length of the list then the index is",
                "\"wrapped around\" by taking the index modulo the length of the list:",
                "",
                "```",
                "> element([\"a\", \"b\", \"c\"], 3)",
                "a",
                "```",
                "",
                "To get the last element from the list use [`length`](/terraform/language/functions/length) to find",
                "the size of the list (minus 1 as the list is zero-based) and then pick the",
                "last element:",
                "",
                "```",
                "> element([\"a\", \"b\", \"c\"], length([\"a\", \"b\", \"c\"])-1)",
                "c",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`index`](/terraform/language/functions/index_function) finds the index for a particular element value.",
                "* [`lookup`](/terraform/language/functions/lookup) retrieves a value from a _map_ given its _key_."
              ]
            },
            {
              "path": "/terraform/language/functions/flatten",
              "id": "collection_functions.flatten",
              "title": "flatten",
              "syntax": [
                "flatten(list)"
              ],
              "description": "takes a list and replaces any elements that are lists with a flattened sequence of the list contents.",
              "full": [
                "---",
                "page_title: flatten - Functions - Configuration Language",
                "description: The flatten function eliminates nested lists from a list.",
                "---",
                "",
                "# `flatten` Function",
                "",
                "`flatten` takes a list and replaces any elements that are lists with a",
                "flattened sequence of the list contents.",
                "",
                "## Examples",
                "",
                "```",
                "> flatten([[\"a\", \"b\"], [], [\"c\"]])",
                "[\"a\", \"b\", \"c\"]",
                "```",
                "",
                "If any of the nested lists also contain directly-nested lists, these too are",
                "flattened recursively:",
                "",
                "```",
                "> flatten([[[\"a\", \"b\"], []], [\"c\"]])",
                "[\"a\", \"b\", \"c\"]",
                "```",
                "",
                "Indirectly-nested lists, such as those in maps, are _not_ flattened.",
                "",
                "## Flattening nested structures for `for_each`",
                "",
                "The",
                "[resource `for_each`](/terraform/language/meta-arguments/for_each)",
                "and",
                "[`dynamic` block](/terraform/language/expressions/dynamic-blocks)",
                "language features both require a collection value that has one element for",
                "each repetition.",
                "",
                "Sometimes your input data structure isn't naturally in a suitable shape for",
                "use in a `for_each` argument, and `flatten` can be a useful helper function",
                "when reducing a nested data structure into a flat one.",
                "",
                "For example, consider a module that declares a variable like the following:",
                "",
                "```hcl",
                "variable \"networks\" {",
                "  type = map(object({",
                "    cidr_block = string",
                "    subnets    = map(object({ cidr_block = string }))",
                "  }))",
                "}",
                "```",
                "",
                "The above is a reasonable way to model objects that naturally form a tree,",
                "such as top-level networks and their subnets. The repetition for the top-level",
                "networks can use this variable directly, because it's already in a form",
                "where the resulting instances match one-to-one with map elements:",
                "",
                "```hcl",
                "resource \"aws_vpc\" \"example\" {",
                "  for_each = var.networks",
                "",
                "  cidr_block = each.value.cidr_block",
                "}",
                "```",
                "",
                "However, in order to declare all of the _subnets_ with a single `resource`",
                "block, we must first flatten the structure to produce a collection where each",
                "top-level element represents a single subnet:",
                "",
                "```hcl",
                "locals {",
                "  # flatten ensures that this local value is a flat list of objects, rather",
                "  # than a list of lists of objects.",
                "  network_subnets = flatten([",
                "    for network_key, network in var.networks : [",
                "      for subnet_key, subnet in network.subnets : {",
                "        network_key = network_key",
                "        subnet_key  = subnet_key",
                "        network_id  = aws_vpc.example[network_key].id",
                "        cidr_block  = subnet.cidr_block",
                "      }",
                "    ]",
                "  ])",
                "}",
                "",
                "resource \"aws_subnet\" \"example\" {",
                "  # local.network_subnets is a list, so we must now project it into a map",
                "  # where each key is unique. We'll combine the network and subnet keys to",
                "  # produce a single unique key per instance.",
                "  for_each = {",
                "    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet",
                "  }",
                "",
                "  vpc_id            = each.value.network_id",
                "  availability_zone = each.value.subnet_key",
                "  cidr_block        = each.value.cidr_block",
                "}",
                "```",
                "",
                "The above results in one subnet instance per subnet object, while retaining",
                "the associations between the subnets and their containing networks.",
                "",
                "## Related Functions",
                "",
                "* [`setproduct`](/terraform/language/functions/setproduct) finds all of the combinations of multiple",
                "  lists or sets of values, which can also be useful when preparing collections",
                "  for use with `for_each` constructs."
              ]
            },
            {
              "path": "/terraform/language/functions/index_function",
              "id": "collection_functions.index",
              "title": "index",
              "syntax": [
                "index(list, value)"
              ],
              "description": "finds the element index for a given value in a list.",
              "full": [
                "---",
                "page_title: index - Functions - Configuration Language",
                "description: The index function finds the element index for a given value in a list.",
                "---",
                "",
                "# `index` Function",
                "",
                "`index` finds the element index for a given value in a list.",
                "",
                "```hcl",
                "index(list, value)",
                "```",
                "",
                "The returned index is zero-based. This function produces an error if the given",
                "value is not present in the list.",
                "",
                "## Examples",
                "",
                "```",
                "> index([\"a\", \"b\", \"c\"], \"b\")",
                "1",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`element`](/terraform/language/functions/element) retrieves a particular element from a list given",
                "  its index."
              ]
            },
            {
              "path": "/terraform/language/functions/keys",
              "id": "collection_functions.keys",
              "title": "keys",
              "syntax": [
                "keys(map)"
              ],
              "description": "takes a map and returns a list containing the keys from that map.",
              "full": [
                "---",
                "page_title: keys - Functions - Configuration Language",
                "description: The keys function returns a list of the keys in a given map.",
                "---",
                "",
                "# `keys` Function",
                "",
                "`keys` takes a map and returns a list containing the keys from that map.",
                "",
                "The keys are returned in lexicographical order, ensuring that the result will",
                "be identical as long as the keys in the map don't change.",
                "",
                "## Examples",
                "",
                "```",
                "> keys({a=1, c=2, d=3})",
                "[",
                "  \"a\",",
                "  \"c\",",
                "  \"d\",",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`values`](/terraform/language/functions/values) returns a list of the _values_ from a map."
              ]
            },
            {
              "path": "/terraform/language/functions/length",
              "id": "collection_functions.length",
              "title": "length",
              "syntax": [
                "length(list|map|string)"
              ],
              "description": "determines the length of a given list, map, or string.",
              "full": [
                "---",
                "page_title: length - Functions - Configuration Language",
                "description: The length function determines the length of a collection or string.",
                "---",
                "",
                "# `length` Function",
                "",
                "`length` determines the length of a given list, map, or string.",
                "",
                "If given a list or map, the result is the number of elements in that collection.",
                "If given a string, the result is the number of characters in the string.",
                "",
                "## Examples",
                "",
                "```",
                "> length([])",
                "0",
                "> length([\"a\", \"b\"])",
                "2",
                "> length({\"a\" = \"b\"})",
                "1",
                "> length(\"hello\")",
                "5",
                "```",
                "",
                "When given a string, the result is the number of characters, rather than the",
                "number of bytes or Unicode sequences that form them:",
                "",
                "```",
                "> length(\"👾🕹️\")",
                "2",
                "```",
                "",
                "A \"character\" is a _grapheme cluster_, as defined by",
                "[Unicode Standard Annex #29](http://unicode.org/reports/tr29/). Note that",
                "remote APIs may have a different definition of \"character\" for the purpose of",
                "length limits on string arguments; a Terraform provider is responsible for",
                "translating Terraform's string representation into that used by its respective",
                "remote system and applying any additional validation rules to it."
              ]
            },
            {
              "path": "/terraform/language/functions/list",
              "id": "collection_functions.list",
              "title": "list",
              "syntax": [
                "list(...values)"
              ],
              "description": "Depreciated since v0.12, use tolist(list|set)",
              "full": [
                "---",
                "page_title: list - Functions - Configuration Language",
                "description: The list function constructs a list from some given elements.",
                "---",
                "",
                "# `list` Function",
                "",
                "The `list` function is no longer available. Prior to Terraform v0.12 it was",
                "the only available syntax for writing a literal list inside an expression,",
                "but Terraform v0.12 introduced a new first-class syntax.",
                "",
                "To update an expression like `list(a, b, c)`, write the following instead:",
                "",
                "```",
                "tolist([a, b, c])",
                "```",
                "",
                "The `[ ... ]` brackets construct a tuple value, and then the `tolist` function",
                "then converts it to a list. For more information on the value types in the",
                "Terraform language, see [Type Constraints](/terraform/language/expressions/types).",
                "",
                "## Related Functions",
                "",
                "* [`concat`](/terraform/language/functions/concat) produces a new list by concatenating together the",
                "  elements from other lists.",
                "* [`tolist`](/terraform/language/functions/tolist) converts a set or tuple value to a list."
              ]
            },
            {
              "path": "/terraform/language/functions/lookup",
              "id": "collection_functions.lookup",
              "title": "lookup",
              "syntax": [
                "lookup(map, key, default)"
              ],
              "description": "retrieves the value of a single element from a map, given its key.",
              "full": [
                "---",
                "page_title: lookup - Functions - Configuration Language",
                "description: The lookup function retrieves an element value from a map given its key.",
                "---",
                "",
                "# `lookup` Function",
                "",
                "`lookup` retrieves the value of a single element from a map, given its key.",
                "If the given key does not exist, the given default value is returned instead.",
                "",
                "```",
                "lookup(map, key, default)",
                "```",
                "",
                "-> For historical reasons, the `default` parameter is actually optional. However,",
                "omitting `default` is deprecated since v0.7 because that would then be",
                "equivalent to the native index syntax, `map[key]`.",
                "",
                "## Examples",
                "",
                "```",
                "> lookup({a=\"ay\", b=\"bee\"}, \"a\", \"what?\")",
                "ay",
                "> lookup({a=\"ay\", b=\"bee\"}, \"c\", \"what?\")",
                "what?",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`element`](/terraform/language/functions/element) retrieves a value from a _list_ given its _index_."
              ]
            },
            {
              "path": "/terraform/language/functions/map",
              "id": "collection_functions.map",
              "title": "map",
              "syntax": [
                "map(...values)"
              ],
              "description": "Depreciated since v0.12, use tomap(object).",
              "full": [
                "---",
                "page_title: map - Functions - Configuration Language",
                "description: The map function constructs a map from some given elements.",
                "---",
                "",
                "# `map` Function",
                "",
                "The `map` function is no longer available. Prior to Terraform v0.12 it was",
                "the only available syntax for writing a literal map inside an expression,",
                "but Terraform v0.12 introduced a new first-class syntax.",
                "",
                "To update an expression like `map(\"a\", \"b\", \"c\", \"d\")`, write the following instead:",
                "",
                "```",
                "tomap({",
                "  a = \"b\"",
                "  c = \"d\"",
                "})",
                "```",
                "",
                "The `{ ... }` braces construct an object value, and then the `tomap` function",
                "then converts it to a map. For more information on the value types in the",
                "Terraform language, see [Type Constraints](/terraform/language/expressions/types).",
                "",
                "## Related Functions",
                "",
                "* [`tomap`](/terraform/language/functions/tomap) converts an object value to a map.",
                "* [`zipmap`](/terraform/language/functions/zipmap) constructs a map dynamically, by taking keys from",
                "  one list and values from another list."
              ]
            },
            {
              "path": "/terraform/language/functions/matchkeys",
              "id": "collection_functions.matchkeys",
              "title": "matchkeys",
              "syntax": [
                "matchkeys(valuelist, keylist, searchset)"
              ],
              "description": "constructs a new list by taking a subset of elements from one list by matching corresponding indexes in another list.",
              "full": [
                "---",
                "page_title: matchkeys - Functions - Configuration Language",
                "description: |-",
                "  The matchkeys function takes a subset of elements from one list by matching",
                "  corresponding indexes in another list.",
                "---",
                "",
                "# `matchkeys` Function",
                "",
                "`matchkeys` constructs a new list by taking a subset of elements from one",
                "list whose indexes match the corresponding indexes of values in another",
                "list.",
                "",
                "```hcl",
                "matchkeys(valueslist, keyslist, searchset)",
                "```",
                "",
                "`matchkeys` identifies the indexes in `keyslist` that are equal to elements of",
                "`searchset`, and then constructs a new list by taking those same indexes from",
                "`valueslist`. Both `valueslist` and `keyslist` must be the same length.",
                "",
                "The ordering of the values in `valueslist` is preserved in the result.",
                "",
                "## Examples",
                "",
                "```",
                "> matchkeys([\"i-123\", \"i-abc\", \"i-def\"], [\"us-west\", \"us-east\", \"us-east\"], [\"us-east\"])",
                "[",
                "  \"i-abc\",",
                "  \"i-def\",",
                "]",
                "```",
                "",
                "If the result ordering is not significant, you can achieve a similar result",
                "using a `for` expression with a map:",
                "",
                "```",
                "> [for i, z in {\"i-123\"=\"us-west\",\"i-abc\"=\"us-east\",\"i-def\"=\"us-east\"}: i if z == \"us-east\"]",
                "[",
                "  \"i-def\",",
                "  \"i-abc\",",
                "]",
                "```",
                "",
                "If the keys and values of interest are attributes of objects in a list of",
                "objects then you can also achieve a similar result using a `for` expression",
                "with that list:",
                "",
                "```",
                "> [for x in [{id=\"i-123\",zone=\"us-west\"},{id=\"i-abc\",zone=\"us-east\"}]: x.id if x.zone == \"us-east\"]",
                "[",
                "  \"i-abc\",",
                "]",
                "```",
                "",
                "For example, the previous form can be used with the list of resource instances",
                "produced by a `resource` block with the `count` meta-attribute set, to filter",
                "the instances by matching one of the resource attributes:",
                "",
                "```",
                "> [for x in aws_instance.example: x.id if x.availability_zone == \"us-east-1a\"]",
                "[",
                "  \"i-abc123\",",
                "  \"i-def456\",",
                "]",
                "```",
                "",
                "Since the signature of `matchkeys` is complicated and not immediately clear to",
                "the reader when used in configuration, prefer to use `for` expressions where",
                "possible to maximize readability."
              ]
            },
            {
              "path": "/terraform/language/functions/merge",
              "id": "collection_functions.merge",
              "title": "merge",
              "syntax": [
                "merge(...maps|objects)"
              ],
              "description": "takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments.",
              "full": [
                "---",
                "page_title: merge - Functions - Configuration Language",
                "description: |-",
                "  The merge function takes an arbitrary number maps or objects, and returns a",
                "  single map or object that contains a merged set of elements from all",
                "  arguments.",
                "---",
                "",
                "# `merge` Function",
                "",
                "`merge` takes an arbitrary number of maps or objects, and returns a single map",
                "or object that contains a merged set of elements from all arguments.",
                "",
                "If more than one given map or object defines the same key or attribute, then",
                "the one that is later in the argument sequence takes precedence. If the",
                "argument types do not match, the resulting type will be an object matching the",
                "type structure of the attributes after the merging rules have been applied.",
                "",
                "## Examples",
                "",
                "```",
                "> merge({a=\"b\", c=\"d\"}, {e=\"f\", c=\"z\"})",
                "{",
                "  \"a\" = \"b\"",
                "  \"c\" = \"z\"",
                "  \"e\" = \"f\"",
                "}",
                "```",
                "",
                "```",
                "> merge({a=\"b\"}, {a=[1,2], c=\"z\"}, {d=3})",
                "{",
                "  \"a\" = [",
                "    1,",
                "    2,",
                "  ]",
                "  \"c\" = \"z\"",
                "  \"d\" = 3",
                "}",
                "```",
                "",
                "The following example uses the expansion symbol (...) to transform the value into separate arguments. Refer to [Expanding Function Argument](/terraform/language/expressions/function-calls#expanding-function-arguments) for details.",
                "",
                "```",
                "> merge([{a=\"b\", c=\"d\"}, {}, {e=\"f\", c=\"z\"}]...)",
                "{",
                "  \"a\" = \"b\"",
                "  \"c\" = \"z\"",
                "  \"e\" = \"f\"",
                "}",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/one",
              "id": "collection_functions.one",
              "title": "one",
              "syntax": [
                "one(list|set)"
              ],
              "description": "takes a list, set, or tuple value with either zero or one elements.",
              "full": [
                "---",
                "page_title: one - Functions - Configuration Language",
                "description: |-",
                "  The 'one' function transforms a list with either zero or one elements into",
                "  either a null value or the value of the first element.",
                "---",
                "",
                "# `one` Function",
                "",
                "-> **Note:** This function is available only in Terraform v0.15 and later.",
                "",
                "`one` takes a list, set, or tuple value with either zero or one elements.",
                "If the collection is empty, `one` returns `null`. Otherwise, `one` returns",
                "the first element. If there are two or more elements then `one` will return",
                "an error.",
                "",
                "This is a specialized function intended for the common situation where a",
                "conditional item is represented as either a zero- or one-element list, where",
                "a module author wishes to return a single value that might be null instead.",
                "",
                "For example:",
                "",
                "```hcl",
                "variable \"include_ec2_instance\" {",
                "  type    = bool",
                "  default = true",
                "}",
                "",
                "resource \"aws_instance\" \"example\" {",
                "  count = var.include_ec2_instance ? 1 : 0",
                "",
                "  # (other resource arguments...)",
                "}",
                "",
                "output \"instance_ip_address\" {",
                "  value = one(aws_instance.example[*].private_ip)",
                "}",
                "```",
                "",
                "Because the `aws_instance` resource above has the `count` argument set to a",
                "conditional that returns either zero or one, the value of",
                "`aws_instance.example` is a list of either zero or one elements. The",
                "`instance_ip_address` output value uses the `one` function as a concise way",
                "to return either the private IP address of a single instance, or `null` if",
                "no instances were created.",
                "",
                "## Relationship to the \"Splat\" Operator",
                "",
                "The Terraform language has a built-in operator `[*]`, known as",
                "[the _splat_ operator](/terraform/language/expressions/splat), and one of its functions",
                "is to translate a primitive value that might be null into a list of either",
                "zero or one elements:",
                "",
                "```hcl",
                "variable \"ec2_instance_type\" {",
                "  description = \"The type of instance to create. If set to null, no instance will be created.\"",
                "",
                "  type    = string",
                "  default = null",
                "}",
                "",
                "resource \"aws_instance\" \"example\" {",
                "  count = length(var.ec2_instance_type[*])",
                "",
                "  instance_type = var.ec2_instance_type",
                "  # (other resource arguments...)",
                "}",
                "",
                "output \"instance_ip_address\" {",
                "  value = one(aws_instance.example[*].private_ip)",
                "}",
                "```",
                "",
                "In this case we can see that the `one` function is, in a sense, the opposite",
                "of applying `[*]` to a primitive-typed value. Splat can convert a possibly-null",
                "value into a zero-or-one list, and `one` can reverse that to return to a",
                "primitive value that might be null.",
                "",
                "## Examples",
                "",
                "```",
                "> one([])",
                "null",
                "> one([\"hello\"])",
                "\"hello\"",
                "> one([\"hello\", \"goodbye\"])",
                "",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"list\" parameter: must be a list, set, or tuple value with",
                "either zero or one elements.",
                "```",
                "",
                "### Using `one` with sets",
                "",
                "The `one` function can be particularly helpful in situations where you have a",
                "set that you know has only zero or one elements. Set values don't support",
                "indexing, so it's not valid to write `var.set[0]` to extract the \"first\"",
                "element of a set, but if you know that there's only one item then `one` can",
                "isolate and return that single item:",
                "",
                "```",
                "> one(toset([]))",
                "null",
                "> one(toset([\"hello\"]))",
                "\"hello\"",
                "```",
                "",
                "Don't use `one` with sets that might have more than one element. This function",
                "will fail in that case:",
                "",
                "```",
                "> one(toset([\"hello\",\"goodbye\"]))",
                "",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"list\" parameter: must be a list, set, or tuple value with",
                "either zero or one elements.",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/range",
              "id": "collection_functions.range",
              "title": "range",
              "syntax": [
                "range(start, limit, step)",
                "range(start, limit)",
                "range(limit)"
              ],
              "description": "generates a list of numbers using a start value, a limit value, and a step value.",
              "full": [
                "---",
                "page_title: range - Functions - Configuration Language",
                "description: The range function generates sequences of numbers.",
                "---",
                "",
                "# `range` Function",
                "",
                "`range` generates a list of numbers using a start value, a limit value,",
                "and a step value.",
                "",
                "```hcl",
                "range(max)",
                "range(start, limit)",
                "range(start, limit, step)",
                "```",
                "",
                "The `start` and `step` arguments can be omitted, in which case `start` defaults",
                "to zero and `step` defaults to either one or negative one depending on whether",
                "`limit` is greater than or less than `start`.",
                "",
                "The resulting list is created by starting with the given `start` value and",
                "repeatedly adding `step` to it until the result is equal to or beyond `limit`.",
                "",
                "The interpretation of `limit` depends on the direction of `step`: for a positive",
                "step, the sequence is complete when the next number is greater than or equal",
                "to `limit`. For a negative step, it's complete when less than or equal.",
                "",
                "The sequence-building algorithm follows the following pseudocode:",
                "",
                "```",
                "let num = start",
                "while num < limit: (or, for negative step, num > limit)",
                "  append num to the sequence",
                "  num = num + step",
                "return the sequence",
                "```",
                "",
                "Because the sequence is created as a physical list in memory, Terraform imposes",
                "an artificial limit of 1024 numbers in the resulting sequence in order to avoid",
                "unbounded memory usage if, for example, a very large value were accidentally",
                "passed as the limit or a very small value as the step. If the algorithm above",
                "would append the 1025th number to the sequence, the function immediately exits",
                "with an error.",
                "",
                "We recommend iterating over existing collections where possible, rather than",
                "creating ranges. However, creating small numerical sequences can sometimes",
                "be useful when combined with other collections in collection-manipulation",
                "functions or `for` expressions.",
                "",
                "## Examples",
                "",
                "```",
                "> range(3)",
                "[",
                "  0,",
                "  1,",
                "  2,",
                "]",
                "",
                "> range(1, 4)",
                "[",
                "  1,",
                "  2,",
                "  3,",
                "]",
                "",
                "> range(1, 8, 2)",
                "[",
                "  1,",
                "  3,",
                "  5,",
                "  7,",
                "]",
                "",
                "> range(1, 4, 0.5)",
                "[",
                "  1,",
                "  1.5,",
                "  2,",
                "  2.5,",
                "  3,",
                "  3.5,",
                "]",
                "",
                "> range(4, 1)",
                "[",
                "  4,",
                "  3,",
                "  2,",
                "]",
                "",
                "> range(10, 5, -2)",
                "[",
                "  10,",
                "  8,",
                "  6,",
                "]",
                "```",
                "",
                "The `range` function is primarily useful when working with other collections",
                "to produce a certain number of instances of something. For example:",
                "",
                "```hcl",
                "variable \"name_counts\" {",
                "  type    = map(number)",
                "  default = {",
                "    \"foo\" = 2",
                "    \"bar\" = 4",
                "  }",
                "}",
                "",
                "locals {",
                "  expanded_names = {",
                "    for name, count in var.name_counts : name => [",
                "      for i in range(count) : format(\"%s%02d\", name, i)",
                "    ]",
                "  }",
                "}",
                "",
                "output \"expanded_names\" {",
                "  value = local.expanded_names",
                "}",
                "",
                "# Produces the following expanded_names value when run with the default",
                "# \"name_counts\":",
                "#",
                "# {",
                "#   \"bar\" = [",
                "#     \"bar00\",",
                "#     \"bar01\",",
                "#     \"bar02\",",
                "#     \"bar03\",",
                "#   ]",
                "#   \"foo\" = [",
                "#     \"foo00\",",
                "#     \"foo01\",",
                "#   ]",
                "# }",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/reverse",
              "id": "collection_functions.reverse",
              "title": "reverse",
              "syntax": [
                "reverse(list)"
              ],
              "description": "reverses a given sequence.",
              "full": [
                "---",
                "page_title: reverse - Functions - Configuration Language",
                "description: The reverse function reverses a sequence.",
                "---",
                "",
                "# `reverse` Function",
                "",
                "`reverse` takes a sequence and produces a new sequence of the same length",
                "with all of the same elements as the given sequence but in reverse order.",
                "",
                "## Examples",
                "",
                "```",
                "> reverse([1, 2, 3])",
                "[",
                "  3,",
                "  2,",
                "  1,",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`strrev`](/terraform/language/functions/strrev) reverses a string."
              ]
            },
            {
              "path": "/terraform/language/functions/setintersection",
              "id": "collection_functions.setintersection",
              "title": "setintersection",
              "syntax": [
                "setintersection(...sets)"
              ],
              "description": "function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common.",
              "full": [
                "---",
                "page_title: setintersection - Functions - Configuration Language",
                "description: |-",
                "  The setintersection function takes multiple sets and produces a single set",
                "  containing only the elements that all of the given sets have in common.",
                "---",
                "",
                "# `setintersection` Function",
                "",
                "The `setintersection` function takes multiple sets and produces a single set",
                "containing only the elements that all of the given sets have in common.",
                "In other words, it computes the",
                "[intersection](https://en.wikipedia.org/wiki/Intersection_\\(set_theory\\)) of the sets.",
                "",
                "```hcl",
                "setintersection(sets...)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> setintersection([\"a\", \"b\"], [\"b\", \"c\"], [\"b\", \"d\"])",
                "[",
                "  \"b\",",
                "]",
                "```",
                "",
                "The given arguments are converted to sets, so the result is also a set and",
                "the ordering of the given elements is not preserved.",
                "",
                "## Related Functions",
                "",
                "* [`contains`](/terraform/language/functions/contains) tests whether a given list or set contains",
                "  a given element value.",
                "* [`setproduct`](/terraform/language/functions/setproduct) computes the _Cartesian product_ of multiple",
                "  sets.",
                "* [`setsubtract`](/terraform/language/functions/setsubtract) computes the _relative complement_ of two sets",
                "* [`setunion`](/terraform/language/functions/setunion) computes the _union_ of",
                "  multiple sets."
              ]
            },
            {
              "path": "/terraform/language/functions/setproduct",
              "id": "collection_functions.setproduct",
              "title": "setproduct",
              "syntax": [
                "setproduct(...sets)"
              ],
              "description": "function finds all of the possible combinations of elements from all of the given sets by computing the cartesian product.",
              "full": [
                "---",
                "page_title: setproduct - Functions - Configuration Language",
                "description: |-",
                "  The setproduct function finds all of the possible combinations of elements",
                "  from all of the given sets by computing the cartesian product.",
                "---",
                "",
                "# `setproduct` Function",
                "",
                "The `setproduct` function finds all of the possible combinations of elements",
                "from all of the given sets by computing the",
                "[Cartesian product](https://en.wikipedia.org/wiki/Cartesian_product).",
                "",
                "```hcl",
                "setproduct(sets...)",
                "```",
                "",
                "This function is particularly useful for finding the exhaustive set of all",
                "combinations of members of multiple sets, such as per-application-per-environment",
                "resources.",
                "",
                "```",
                "> setproduct([\"development\", \"staging\", \"production\"], [\"app1\", \"app2\"])",
                "[",
                "  [",
                "    \"development\",",
                "    \"app1\",",
                "  ],",
                "  [",
                "    \"development\",",
                "    \"app2\",",
                "  ],",
                "  [",
                "    \"staging\",",
                "    \"app1\",",
                "  ],",
                "  [",
                "    \"staging\",",
                "    \"app2\",",
                "  ],",
                "  [",
                "    \"production\",",
                "    \"app1\",",
                "  ],",
                "  [",
                "    \"production\",",
                "    \"app2\",",
                "  ],",
                "]",
                "```",
                "",
                "You must pass at least two arguments to this function.",
                "",
                "Although defined primarily for sets, this function can also work with lists.",
                "If all of the given arguments are lists then the result is a list, preserving",
                "the ordering of the given lists. Otherwise the result is a set. In either case,",
                "the result's element type is a list of values corresponding to each given",
                "argument in turn.",
                "",
                "## Examples",
                "",
                "There is an example of the common usage of this function above. There are some",
                "other situations that are less common when hand-writing but may arise in",
                "reusable module situations.",
                "",
                "If any of the arguments is empty then the result is always empty itself,",
                "similar to how multiplying any number by zero gives zero:",
                "",
                "```",
                "> setproduct([\"development\", \"staging\", \"production\"], [])",
                "[]",
                "```",
                "",
                "Similarly, if all of the arguments have only one element then the result has",
                "only one element, which is the first element of each argument:",
                "",
                "```",
                "> setproduct([\"a\"], [\"b\"])",
                "[",
                "  [",
                "    \"a\",",
                "    \"b\",",
                "  ],",
                "]",
                "```",
                "",
                "Each argument must have a consistent type for all of its elements. If not,",
                "Terraform will attempt to convert to the most general type, or produce an",
                "error if such a conversion is impossible. For example, mixing both strings and",
                "numbers results in the numbers being converted to strings so that the result",
                "elements all have a consistent type:",
                "",
                "```",
                "> setproduct([\"staging\", \"production\"], [\"a\", 2])",
                "[",
                "  [",
                "    \"staging\",",
                "    \"a\",",
                "  ],",
                "  [",
                "    \"staging\",",
                "    \"2\",",
                "  ],",
                "  [",
                "    \"production\",",
                "    \"a\",",
                "  ],",
                "  [",
                "    \"production\",",
                "    \"2\",",
                "  ],",
                "]",
                "```",
                "",
                "## Finding combinations for `for_each`",
                "",
                "The",
                "[resource `for_each`](/terraform/language/meta-arguments/for_each)",
                "and",
                "[`dynamic` block](/terraform/language/expressions/dynamic-blocks)",
                "language features both require a collection value that has one element for",
                "each repetition.",
                "",
                "Sometimes your input data comes in separate values that cannot be directly",
                "used in a `for_each` argument, and `setproduct` can be a useful helper function",
                "for the situation where you want to find all unique combinations of elements in",
                "a number of different collections.",
                "",
                "For example, consider a module that declares variables like the following:",
                "",
                "```hcl",
                "variable \"networks\" {",
                "  type = map(object({",
                "    base_cidr_block = string",
                "  }))",
                "}",
                "",
                "variable \"subnets\" {",
                "  type = map(object({",
                "    number = number",
                "  }))",
                "}",
                "```",
                "",
                "If the goal is to create each of the defined subnets per each of the defined networks, creating the top-level networks can directly use `var.networks` because it is already in a form where the resulting instances match one-to-one with map elements:",
                "",
                "```hcl",
                "resource \"aws_vpc\" \"example\" {",
                "  for_each = var.networks",
                "",
                "  cidr_block = each.value.base_cidr_block",
                "}",
                "```",
                "",
                "However, to declare all of the _subnets_ with a single `resource` block, you must first produce a collection whose elements represent all of the combinations of networks and subnets, so that each element itself represents a subnet:",
                "",
                "```hcl",
                "locals {",
                "  # setproduct works with sets and lists, but the variables are both maps",
                "  # so convert them first.",
                "  networks = [",
                "    for key, network in var.networks : {",
                "      key        = key",
                "      cidr_block = network.cidr_block",
                "    }",
                "  ]",
                "  subnets = [",
                "    for key, subnet in var.subnets : {",
                "      key    = key",
                "      number = subnet.number",
                "    }",
                "  ]",
                "",
                "  network_subnets = [",
                "    # in pair, element zero is a network and element one is a subnet,",
                "    # in all unique combinations.",
                "    for pair in setproduct(local.networks, local.subnets) : {",
                "      network_key = pair[0].key",
                "      subnet_key  = pair[1].key",
                "      network_id  = aws_vpc.example[pair[0].key].id",
                "",
                "      # The cidr_block is derived from the corresponding network. Refer to the",
                "      # cidrsubnet function for more information on how this calculation works.",
                "      cidr_block = cidrsubnet(pair[0].cidr_block, 4, pair[1].number)",
                "    }",
                "  ]",
                "}",
                "",
                "resource \"aws_subnet\" \"example\" {",
                "  # local.network_subnets is a list, so project it into a map",
                "  # where each key is unique. Combine the network and subnet keys to",
                "  # produce a single unique key per instance.",
                "  for_each = {",
                "    for subnet in local.network_subnets : \"${subnet.network_key}.${subnet.subnet_key}\" => subnet",
                "  }",
                "",
                "  vpc_id            = each.value.network_id",
                "  availability_zone = each.value.subnet_key",
                "  cidr_block        = each.value.cidr_block",
                "}",
                "```",
                "",
                "The `network_subnets` list in the example above creates one subnet instance per combination of network and subnet elements in the input variables. So for this example input:",
                "",
                "```hcl",
                "networks = {",
                "  a = {",
                "    base_cidr_block = \"10.1.0.0/16\"",
                "  }",
                "  b = {",
                "    base_cidr_block = \"10.2.0.0/16\"",
                "  }",
                "}",
                "subnets = {",
                "  a = {",
                "    number = 1",
                "  }",
                "  b = {",
                "    number = 2",
                "  }",
                "  c = {",
                "    number = 3",
                "  }",
                "}",
                "```",
                "",
                "The `network_subnets` output would look similar to the following:",
                "",
                "```hcl",
                "[",
                "  {",
                "    \"cidr_block\" = \"10.1.16.0/20\"",
                "    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"",
                "    \"network_key\" = \"a\"",
                "    \"subnet_key\" = \"a\"",
                "  },",
                "  {",
                "    \"cidr_block\" = \"10.1.32.0/20\"",
                "    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"",
                "    \"network_key\" = \"a\"",
                "    \"subnet_key\" = \"b\"",
                "  },",
                "  {",
                "    \"cidr_block\" = \"10.1.48.0/20\"",
                "    \"network_id\" = \"vpc-0bfb00ca6173ea5aa\"",
                "    \"network_key\" = \"a\"",
                "    \"subnet_key\" = \"c\"",
                "  },",
                "  {",
                "    \"cidr_block\" = \"10.2.16.0/20\"",
                "    \"network_id\" = \"vpc-0d193e011f6211a7d\"",
                "    \"network_key\" = \"b\"",
                "    \"subnet_key\" = \"a\"",
                "  },",
                "  {",
                "    \"cidr_block\" = \"10.2.32.0/20\"",
                "    \"network_id\" = \"vpc-0d193e011f6211a7d\"",
                "    \"network_key\" = \"b\"",
                "    \"subnet_key\" = \"b\"",
                "  },",
                "  {",
                "    \"cidr_block\" = \"10.2.48.0/20\"",
                "    \"network_id\" = \"vpc-0d193e011f6211a7d\"",
                "    \"network_key\" = \"b\"",
                "    \"subnet_key\" = \"c\"",
                "  },",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`contains`](/terraform/language/functions/contains) tests whether a given list or set contains",
                "  a given element value.",
                "- [`flatten`](/terraform/language/functions/flatten) is useful for flattening hierarchical data",
                "  into a single list, for situations where the relationships between two",
                "  object types are defined explicitly.",
                "- [`setintersection`](/terraform/language/functions/setintersection) computes the _intersection_ of",
                "  multiple sets.",
                "- [`setsubtract`](/terraform/language/functions/setsubtract) computes the _relative complement_ of two sets",
                "- [`setunion`](/terraform/language/functions/setunion) computes the _union_ of multiple",
                "  sets."
              ]
            },
            {
              "path": "/terraform/language/functions/setsubtract",
              "id": "collection_functions.setsubtract",
              "title": "setsubtract",
              "syntax": [
                "setsubtract(...sets)"
              ],
              "description": "function returns a new set containing the elements from the first set that are not present in the second set.",
              "full": [
                "---",
                "page_title: setsubtract - Functions - Configuration Language",
                "description: |-",
                "  The setsubtract function returns a new set containing the elements",
                "  from the first set that are not present in the second set",
                "---",
                "",
                "# `setsubtract` Function",
                "",
                "The `setsubtract` function returns a new set containing the elements from the first set that are not present in the second set. In other words, it computes the",
                "[relative complement](https://en.wikipedia.org/wiki/Complement_\\(set_theory\\)#Relative_complement) of the second set.",
                "",
                "```hcl",
                "setsubtract(a, b)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> setsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\"])",
                "toset([",
                "  \"b\",",
                "])",
                "```",
                "",
                "### Set Difference (Symmetric Difference)",
                "",
                "```",
                "> setunion(setsubtract([\"a\", \"b\", \"c\"], [\"a\", \"c\", \"d\"]), setsubtract([\"a\", \"c\", \"d\"], [\"a\", \"b\", \"c\"]))",
                "toset([",
                "  \"b\",",
                "  \"d\",",
                "])",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`setintersection`](/terraform/language/functions/setintersection) computes the _intersection_ of multiple sets",
                "* [`setproduct`](/terraform/language/functions/setproduct) computes the _Cartesian product_ of multiple",
                "  sets.",
                "* [`setunion`](/terraform/language/functions/setunion) computes the _union_ of",
                "  multiple sets."
              ]
            },
            {
              "path": "/terraform/language/functions/setunion",
              "id": "collection_functions.setunion",
              "title": "setunion",
              "syntax": [
                "setunion(...sets)"
              ],
              "description": "function takes multiple sets and produces a single set containing the elements from all of the given sets.",
              "full": [
                "---",
                "page_title: setunion - Functions - Configuration Language",
                "description: |-",
                "  The setunion function takes multiple sets and produces a single set",
                "  containing the elements from all of the given sets.",
                "---",
                "",
                "# `setunion` Function",
                "",
                "The `setunion` function takes multiple sets and produces a single set",
                "containing the elements from all of the given sets. In other words, it",
                "computes the [union](https://en.wikipedia.org/wiki/Union_\\(set_theory\\)) of",
                "the sets.",
                "",
                "```hcl",
                "setunion(sets...)",
                "```",
                "",
                "## Examples",
                "",
                "```",
                "> setunion([\"a\", \"b\"], [\"b\", \"c\"], [\"d\"])",
                "[",
                "  \"d\",",
                "  \"b\",",
                "  \"c\",",
                "  \"a\",",
                "]",
                "```",
                "",
                "The given arguments are converted to sets, so the result is also a set and",
                "the ordering of the given elements is not preserved.",
                "",
                "## Related Functions",
                "",
                "* [`contains`](/terraform/language/functions/contains) tests whether a given list or set contains",
                "  a given element value.",
                "* [`setintersection`](/terraform/language/functions/setintersection) computes the _intersection_ of",
                "  multiple sets.",
                "* [`setproduct`](/terraform/language/functions/setproduct) computes the _Cartesian product_ of multiple",
                "  sets.",
                "* [`setsubtract`](/terraform/language/functions/setsubtract) computes the _relative complement_ of two sets"
              ]
            },
            {
              "path": "/terraform/language/functions/slice",
              "id": "collection_functions.slice",
              "title": "slice",
              "syntax": [
                "slice(list, startindex, endindex)"
              ],
              "description": "extracts some consecutive elements from within a list.",
              "full": [
                "---",
                "page_title: slice - Functions - Configuration Language",
                "description: The slice function extracts some consecutive elements from within a list.",
                "---",
                "",
                "# `slice` Function",
                "",
                "`slice` extracts some consecutive elements from within a list.",
                "",
                "```hcl",
                "slice(list, startindex, endindex)",
                "```",
                "",
                "`startindex` is inclusive, while `endindex` is exclusive. This function returns",
                "an error if either index is outside the bounds of valid indices for the given",
                "list.",
                "",
                "## Examples",
                "",
                "```",
                "> slice([\"a\", \"b\", \"c\", \"d\"], 1, 3)",
                "[",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`substr`](/terraform/language/functions/substr) performs a similar function for characters in a",
                "  string, although it uses a length instead of an end index."
              ]
            },
            {
              "path": "/terraform/language/functions/sort",
              "id": "collection_functions.sort",
              "title": "sort",
              "syntax": [
                "sort(list)"
              ],
              "description": "takes a list of strings and returns a new list with those strings sorted lexicographically.",
              "full": [
                "---",
                "page_title: sort - Functions - Configuration Language",
                "description: |-",
                "  The sort function takes a list of strings and returns a new list with those",
                "  strings sorted lexicographically.",
                "---",
                "",
                "# `sort` Function",
                "",
                "`sort` takes a list of strings and returns a new list with those strings",
                "sorted lexicographically.",
                "",
                "The sort is in terms of Unicode codepoints, with higher codepoints appearing",
                "after lower ones in the result.",
                "",
                "## Examples",
                "",
                "```",
                "> sort([\"e\", \"d\", \"a\", \"x\"])",
                "[",
                "  \"a\",",
                "  \"d\",",
                "  \"e\",",
                "  \"x\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/sum",
              "id": "collection_functions.sum",
              "title": "sum",
              "syntax": [
                "sum(list<number>)"
              ],
              "description": "takes a list or set of numbers and returns the sum of those numbers.",
              "full": [
                "---",
                "page_title: sum - Functions - Configuration Language",
                "description: |-",
                "  The sum function takes a list or set of numbers and returns the sum of those",
                "  numbers.",
                "---",
                "",
                "# `sum` Function",
                "",
                "`sum` takes a list or set of numbers and returns the sum of those numbers.",
                "",
                "## Examples",
                "",
                "```",
                "> sum([10, 13, 6, 4.5])",
                "33.5",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/transpose",
              "id": "collection_functions.transpose",
              "title": "transpose",
              "syntax": [
                "transpose(map)"
              ],
              "description": "takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings.",
              "full": [
                "---",
                "page_title: transpose - Functions - Configuration Language",
                "description: |-",
                "  The transpose function takes a map of lists of strings and swaps the keys",
                "  and values.",
                "---",
                "",
                "# `transpose` Function",
                "",
                "`transpose` takes a map of lists of strings and swaps the keys and values",
                "to produce a new map of lists of strings.",
                "",
                "## Examples",
                "",
                "```",
                "> transpose({\"a\" = [\"1\", \"2\"], \"b\" = [\"2\", \"3\"]})",
                "{",
                "  \"1\" = [",
                "    \"a\",",
                "  ],",
                "  \"2\" = [",
                "    \"a\",",
                "    \"b\",",
                "  ],",
                "  \"3\" = [",
                "    \"b\",",
                "  ],",
                "}",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/values",
              "id": "collection_functions.values",
              "title": "values",
              "syntax": [
                "values(map)"
              ],
              "description": "takes a map and returns a list containing the values of the elements in that map.",
              "full": [
                "---",
                "page_title: values - Functions - Configuration Language",
                "description: The values function returns a list of the element values in a given map.",
                "---",
                "",
                "# `values` Function",
                "",
                "`values` takes a map and returns a list containing the values of the elements",
                "in that map.",
                "",
                "The values are returned in lexicographical order by their corresponding _keys_,",
                "so the values will be returned in the same order as their keys would be",
                "returned from [`keys`](/terraform/language/functions/keys).",
                "",
                "## Examples",
                "",
                "```",
                "> values({a=3, c=2, d=1})",
                "[",
                "  3,",
                "  2,",
                "  1,",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`keys`](/terraform/language/functions/keys) returns a list of the _keys_ from a map."
              ]
            },
            {
              "path": "/terraform/language/functions/zipmap",
              "id": "collection_functions.zipmap",
              "title": "zipmap",
              "syntax": [
                "zipmap(keyslist, valueslist)"
              ],
              "description": "constructs a map from a list of keys and a corresponding list of values.",
              "full": [
                "---",
                "page_title: zipmap - Functions - Configuration Language",
                "description: |-",
                "  The zipmap function constructs a map from a list of keys and a corresponding",
                "  list of values.",
                "---",
                "",
                "# `zipmap` Function",
                "",
                "`zipmap` constructs a map from a list of keys and a corresponding list of",
                "values.",
                "",
                "```hcl",
                "zipmap(keyslist, valueslist)",
                "```",
                "",
                "Both `keyslist` and `valueslist` must be of the same length. `keyslist` must",
                "be a list of strings, while `valueslist` can be a list of any type.",
                "",
                "Each pair of elements with the same index from the two lists will be used",
                "as the key and value of an element in the resulting map. If the same value",
                "appears multiple times in `keyslist` then the value with the highest index",
                "is used in the resulting map.",
                "",
                "## Examples",
                "",
                "```",
                "> zipmap([\"a\", \"b\"], [1, 2])",
                "{",
                "  \"a\" = 1",
                "  \"b\" = 2",
                "}",
                "```"
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.encoding_functions",
          "title": "Encoding Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/base64decode",
              "id": "encoding_functions.base64decode",
              "title": "base64decode",
              "syntax": [
                "base64decode(base64)"
              ],
              "description": "takes a string containing a Base64 character sequence and returns the original string.",
              "full": [
                "---",
                "page_title: base64decode - Functions - Configuration Language",
                "description: The base64decode function decodes a string containing a base64 sequence.",
                "---",
                "",
                "# `base64decode` Function",
                "",
                "`base64decode` takes a string containing a Base64 character sequence and",
                "returns the original string.",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "Strings in the Terraform language are sequences of unicode characters rather",
                "than bytes, so this function will also interpret the resulting bytes as",
                "UTF-8. If the bytes after Base64 decoding are _not_ valid UTF-8, this function",
                "produces an error.",
                "",
                "While we do not recommend manipulating large, raw binary data in the Terraform",
                "language, Base64 encoding is the standard way to represent arbitrary byte",
                "sequences, and so resource types that accept or return binary data will use",
                "Base64 themselves, which avoids the need to encode or decode it directly in",
                "most cases. Various other functions with names containing \"base64\" can generate",
                "or manipulate Base64 data directly.",
                "",
                "`base64decode` is, in effect, a shorthand for calling",
                "[`textdecodebase64`](/terraform/language/functions/textdecodebase64) with the encoding name set to",
                "`UTF-8`.",
                "",
                "## Examples",
                "",
                "```",
                "> base64decode(\"SGVsbG8gV29ybGQ=\")",
                "Hello World",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`base64encode`](/terraform/language/functions/base64encode) performs the opposite operation,",
                "  encoding the UTF-8 bytes for a string as Base64.",
                "* [`textdecodebase64`](/terraform/language/functions/textdecodebase64) is a more general function that",
                "  supports character encodings other than UTF-8.",
                "* [`base64gzip`](/terraform/language/functions/base64gzip) applies gzip compression to a string",
                "  and returns the result with Base64 encoding.",
                "* [`filebase64`](/terraform/language/functions/filebase64) reads a file from the local filesystem",
                "  and returns its raw bytes with Base64 encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/base64encode",
              "id": "encoding_functions.base64encode",
              "title": "base64encode",
              "syntax": [
                "base64encode(string)"
              ],
              "description": "applies Base64 encoding to a string.",
              "full": [
                "---",
                "page_title: base64encode - Functions - Configuration Language",
                "description: The base64encode function applies Base64 encoding to a string.",
                "---",
                "",
                "# `base64encode` Function",
                "",
                "`base64encode` applies Base64 encoding to a string.",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "Strings in the Terraform language are sequences of unicode characters rather",
                "than bytes, so this function will first encode the characters from the string",
                "as UTF-8, and then apply Base64 encoding to the result.",
                "",
                "The Terraform language applies Unicode normalization to all strings, and so",
                "passing a string through `base64decode` and then `base64encode` may not yield",
                "the original result exactly.",
                "",
                "While we do not recommend manipulating large, raw binary data in the Terraform",
                "language, Base64 encoding is the standard way to represent arbitrary byte",
                "sequences, and so resource types that accept or return binary data will use",
                "Base64 themselves, and so this function exists primarily to allow string",
                "data to be easily provided to resource types that expect Base64 bytes.",
                "",
                "`base64encode` is, in effect, a shorthand for calling",
                "[`textencodebase64`](/terraform/language/functions/textencodebase64) with the encoding name set to",
                "`UTF-8`.",
                "",
                "## Examples",
                "",
                "```",
                "> base64encode(\"Hello World\")",
                "SGVsbG8gV29ybGQ=",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`base64decode`](/terraform/language/functions/base64decode) performs the opposite operation,",
                "  decoding Base64 data and interpreting it as a UTF-8 string.",
                "* [`textencodebase64`](/terraform/language/functions/textencodebase64) is a more general function that",
                "  supports character encodings other than UTF-8.",
                "* [`base64gzip`](/terraform/language/functions/base64gzip) applies gzip compression to a string",
                "  and returns the result with Base64 encoding all in one operation.",
                "* [`filebase64`](/terraform/language/functions/filebase64) reads a file from the local filesystem",
                "  and returns its raw bytes with Base64 encoding, without creating an",
                "  intermediate Unicode string."
              ]
            },
            {
              "path": "/terraform/language/functions/base64gzip",
              "id": "encoding_functions.base64gzip",
              "title": "base64gzip",
              "syntax": [
                "base64gzip(string)"
              ],
              "description": "compresses a string with gzip and then encodes the result in Base64 encoding.",
              "full": [
                "---",
                "page_title: base64gzip - Functions - Configuration Language",
                "description: |-",
                "  The base64encode function compresses the given string with gzip and then",
                "  encodes the result in Base64.",
                "---",
                "",
                "# `base64gzip` Function",
                "",
                "`base64gzip` compresses a string with gzip and then encodes the result in",
                "Base64 encoding.",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "Strings in the Terraform language are sequences of unicode characters rather",
                "than bytes, so this function will first encode the characters from the string",
                "as UTF-8, then apply gzip compression, and then finally apply Base64 encoding.",
                "",
                "While we do not recommend manipulating large, raw binary data in the Terraform",
                "language, this function can be used to compress reasonably sized text strings",
                "generated within the Terraform language. For example, the result of this",
                "function can be used to create a compressed object in Amazon S3 as part of",
                "an S3 website.",
                "",
                "## Related Functions",
                "",
                "* [`base64encode`](/terraform/language/functions/base64encode) applies Base64 encoding _without_",
                "  gzip compression.",
                "* [`filebase64`](/terraform/language/functions/filebase64) reads a file from the local filesystem",
                "  and returns its raw bytes with Base64 encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/csvdecode",
              "id": "encoding_functions.csvdecode",
              "title": "csvdecode",
              "syntax": [
                "csvdecode(string)"
              ],
              "description": "decodes a string containing CSV-formatted data and produces a list of maps representing that data.",
              "full": [
                "---",
                "page_title: csvdecode - Functions - Configuration Language",
                "description: The csvdecode function decodes CSV data into a list of maps.",
                "---",
                "",
                "# `csvdecode` Function",
                "",
                "`csvdecode` decodes a string containing CSV-formatted data and produces a",
                "list of maps representing that data.",
                "",
                "CSV is _Comma-separated Values_, an encoding format for tabular data. There",
                "are many variants of CSV, but this function implements the format defined",
                "in [RFC 4180](https://tools.ietf.org/html/rfc4180).",
                "",
                "The first line of the CSV data is interpreted as a \"header\" row: the values",
                "given are used as the keys in the resulting maps. Each subsequent line becomes",
                "a single map in the resulting list, matching the keys from the header row",
                "with the given values by index. All lines in the file must contain the same",
                "number of fields, or this function will produce an error.",
                "",
                "## Examples",
                "",
                "```",
                "> csvdecode(\"a,b,c\\n1,2,3\\n4,5,6\")",
                "[",
                "  {",
                "    \"a\" = \"1\"",
                "    \"b\" = \"2\"",
                "    \"c\" = \"3\"",
                "  },",
                "  {",
                "    \"a\" = \"4\"",
                "    \"b\" = \"5\"",
                "    \"c\" = \"6\"",
                "  }",
                "]",
                "```",
                "",
                "## Use with the `for_each` meta-argument",
                "",
                "You can use the result of `csvdecode` with",
                "[the `for_each` meta-argument](/terraform/language/meta-arguments/for_each)",
                "to describe a collection of similar objects whose differences are",
                "described by the rows in the given CSV file.",
                "",
                "There must be one column in the CSV file that can serve as a unique id for each",
                "row, which we can then use as the tracking key for the individual instances in",
                "the `for_each` expression. For example:",
                "",
                "```hcl",
                "locals {",
                "  # We've included this inline to create a complete example, but in practice",
                "  # this is more likely to be loaded from a file using the \"file\" function.",
                "  csv_data = <<-CSV",
                "    local_id,instance_type,ami",
                "    foo1,t2.micro,ami-54d2a63b",
                "    foo2,t2.micro,ami-54d2a63b",
                "    foo3,t2.micro,ami-54d2a63b",
                "    bar1,m3.large,ami-54d2a63b",
                "  CSV",
                "",
                "  instances = csvdecode(local.csv_data)",
                "}",
                "",
                "resource \"aws_instance\" \"example\" {",
                "  for_each = { for inst in local.instances : inst.local_id => inst }",
                "",
                "  instance_type = each.value.instance_type",
                "  ami           = each.value.ami",
                "}",
                "```",
                "",
                "The `for` expression in our `for_each` argument transforms the list produced",
                "by `csvdecode` into a map using the `local_id` as a key, which tells",
                "Terraform to use the `local_id` value to track each instance it creates.",
                "Terraform will create and manage the following instance addresses:",
                "",
                "- `aws_instance.example[\"foo1\"]`",
                "- `aws_instance.example[\"foo2\"]`",
                "- `aws_instance.example[\"foo3\"]`",
                "- `aws_instance.example[\"bar1\"]`",
                "",
                "If you modify a row in the CSV on a subsequent plan, Terraform will interpret",
                "that as an update to the existing object as long as the `local_id` value is",
                "unchanged. If you add or remove rows from the CSV then Terraform will plan to",
                "create or destroy associated instances as appropriate.",
                "",
                "If there is no reasonable value you can use as a unique identifier in your CSV",
                "then you could instead use",
                "[the `count` meta-argument](/terraform/language/meta-arguments/count)",
                "to define an object for each CSV row, with each one identified by its index into",
                "the list returned by `csvdecode`. However, in that case any future updates to",
                "the CSV may be disruptive if they change the positions of particular objects in",
                "the list. We recommend using `for_each` with a unique id column to make",
                "behavior more predictable on future changes."
              ]
            },
            {
              "path": "/terraform/language/functions/jsondecode",
              "id": "encoding_functions.jsondecode",
              "title": "jsondecode",
              "syntax": [
                "jsondecode(string)"
              ],
              "description": "interprets a given string as JSON, returning a representation its value.",
              "full": [
                "---",
                "page_title: jsondecode - Functions - Configuration Language",
                "description: |-",
                "  The jsondecode function decodes a JSON string into a representation of its",
                "  value.",
                "---",
                "",
                "# `jsondecode` Function",
                "",
                "`jsondecode` interprets a given string as JSON, returning a representation",
                "of the result of decoding that string.",
                "",
                "The JSON encoding is defined in [RFC 7159](https://tools.ietf.org/html/rfc7159).",
                "",
                "This function maps JSON values to",
                "[Terraform language values](/terraform/language/expressions/types)",
                "in the following way:",
                "",
                "| JSON type | Terraform type                                               |",
                "| --------- | ------------------------------------------------------------ |",
                "| String    | `string`                                                     |",
                "| Number    | `number`                                                     |",
                "| Boolean   | `bool`                                                       |",
                "| Object    | `object(...)` with attribute types determined per this table |",
                "| Array     | `tuple(...)` with element types determined per this table    |",
                "| Null      | The Terraform language `null` value                          |",
                "",
                "The Terraform language automatic type conversion rules mean that you don't",
                "usually need to worry about exactly what type is produced for a given value,",
                "and can just use the result in an intuitive way.",
                "",
                "## Examples",
                "",
                "```",
                "> jsondecode(\"{\\\"hello\\\": \\\"world\\\"}\")",
                "{",
                "  \"hello\" = \"world\"",
                "}",
                "> jsondecode(\"true\")",
                "true",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`jsonencode`](/terraform/language/functions/jsonencode) performs the opposite operation, _encoding_",
                "  a value as JSON."
              ]
            },
            {
              "path": "/terraform/language/functions/jsonencode",
              "id": "encoding_functions.jsonencode",
              "title": "jsonencode",
              "syntax": [
                "jsonencode(object)"
              ],
              "description": "encodes a given value to a string using JSON syntax.",
              "full": [
                "---",
                "page_title: jsonencode - Functions - Configuration Language",
                "description: The jsonencode function encodes a given value as a JSON string.",
                "---",
                "",
                "# `jsonencode` Function",
                "",
                "`jsonencode` encodes a given value to a string using JSON syntax.",
                "",
                "The JSON encoding is defined in [RFC 7159](https://tools.ietf.org/html/rfc7159).",
                "",
                "This function maps",
                "[Terraform language values](/terraform/language/expressions/types)",
                "to JSON values in the following way:",
                "",
                "| Terraform type | JSON type |",
                "| -------------- | --------- |",
                "| `string`       | String    |",
                "| `number`       | Number    |",
                "| `bool`         | Bool      |",
                "| `list(...)`    | Array     |",
                "| `set(...)`     | Array     |",
                "| `tuple(...)`   | Array     |",
                "| `map(...)`     | Object    |",
                "| `object(...)`  | Object    |",
                "| Null value     | `null`    |",
                "",
                "Since the JSON format cannot fully represent all of the Terraform language",
                "types, passing the `jsonencode` result to `jsondecode` will not produce an",
                "identical value, but the automatic type conversion rules mean that this is",
                "rarely a problem in practice.",
                "",
                "When encoding strings, this function escapes some characters using",
                "Unicode escape sequences: replacing `<`, `>`, `&`, `U+2028`, and `U+2029` with",
                "`\\u003c`, `\\u003e`, `\\u0026`, `\\u2028`, and `\\u2029`. This is to preserve",
                "compatibility with Terraform 0.11 behavior.",
                "",
                "The `jsonencode` command outputs a minified representation of the input.",
                "",
                "## Examples",
                "",
                "```",
                "> jsonencode({\"hello\"=\"world\"})",
                "{\"hello\":\"world\"}",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`jsondecode`](/terraform/language/functions/jsondecode) performs the opposite operation, _decoding_",
                "  a JSON string to obtain its represented value."
              ]
            },
            {
              "path": "/terraform/language/functions/textdecodebase64",
              "id": "encoding_functions.textdecodebase64",
              "title": "textdecodebase64",
              "syntax": [
                "textdecodebase64(base64, encoding)"
              ],
              "description": "function decodes a string that was previously Base64-encoded.",
              "full": [
                "---",
                "page_title: textdecodebase64 - Functions - Configuration Language",
                "description: >-",
                "  The textdecodebase64 function decodes a string that was previously",
                "  Base64-encoded,",
                "",
                "  and then interprets the result as characters in a specified character",
                "  encoding.",
                "---",
                "",
                "# `textdecodebase64` Function",
                "",
                "-> **Note:** This function is supported only in Terraform v0.14 and later.",
                "",
                "`textdecodebase64` function decodes a string that was previously Base64-encoded,",
                "and then interprets the result as characters in a specified character encoding.",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "The `encoding_name` argument must contain one of the encoding names or aliases",
                "recorded in",
                "[the IANA character encoding registry](https://www.iana.org/assignments/character-sets/character-sets.xhtml).",
                "Terraform supports only a subset of the registered encodings, and the encoding",
                "support may vary between Terraform versions.",
                "",
                "Terraform accepts the encoding name `UTF-8`, which will produce the same result",
                "as [`base64decode`](/terraform/language/functions/base64decode).",
                "",
                "## Examples",
                "",
                "```",
                "> textdecodebase64(\"SABlAGwAbABvACAAVwBvAHIAbABkAA==\", \"UTF-16LE\")",
                "Hello World",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`textencodebase64`](/terraform/language/functions/textencodebase64) performs the opposite operation,",
                "  applying target encoding and then Base64 to a string.",
                "* [`base64decode`](/terraform/language/functions/base64decode) is effectively a shorthand for",
                "  `textdecodebase64` where the character encoding is fixed as `UTF-8`."
              ]
            },
            {
              "path": "/terraform/language/functions/textencodebase64",
              "id": "encoding_functions.textencodebase64",
              "title": "textencodebase64",
              "syntax": [
                "textencodebase64(string, encoding)"
              ],
              "description": "encodes the unicode characters in a given string using a specified character encoding.",
              "full": [
                "---",
                "page_title: textencodebase64 - Functions - Configuration Language",
                "description: >-",
                "  The textencodebase64 function encodes the unicode characters in a given string",
                "  using a",
                "",
                "  specified character encoding, returning the result base64 encoded.",
                "---",
                "",
                "# `textencodebase64` Function",
                "",
                "-> **Note:** This function is supported only in Terraform v0.14 and later.",
                "",
                "`textencodebase64` encodes the unicode characters in a given string using a",
                "specified character encoding, returning the result base64 encoded because",
                "Terraform language strings are always sequences of unicode characters.",
                "",
                "```hcl",
                "substr(string, encoding_name)",
                "```",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "The `encoding_name` argument must contain one of the encoding names or aliases",
                "recorded in",
                "[the IANA character encoding registry](https://www.iana.org/assignments/character-sets/character-sets.xhtml).",
                "Terraform supports only a subset of the registered encodings, and the encoding",
                "support may vary between Terraform versions. In particular Terraform supports",
                "`UTF-16LE`, which is the native character encoding for the Windows API and",
                "therefore sometimes expected by Windows-originated software such as PowerShell.",
                "",
                "Terraform also accepts the encoding name `UTF-8`, which will produce the same",
                "result as [`base64encode`](/terraform/language/functions/base64encode).",
                "",
                "## Examples",
                "",
                "```",
                "> textencodebase64(\"Hello World\", \"UTF-16LE\")",
                "SABlAGwAbABvACAAVwBvAHIAbABkAA==",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`textdecodebase64`](/terraform/language/functions/textdecodebase64) performs the opposite operation,",
                "  decoding Base64 data and interpreting it as a particular character encoding.",
                "* [`base64encode`](/terraform/language/functions/base64encode) applies Base64 encoding of the UTF-8",
                "  encoding of a string.",
                "* [`filebase64`](/terraform/language/functions/filebase64) reads a file from the local filesystem",
                "  and returns its raw bytes with Base64 encoding, without creating an",
                "  intermediate Unicode string."
              ]
            },
            {
              "path": "/terraform/language/functions/urlencode",
              "id": "encoding_functions.urlencode",
              "title": "urlencode",
              "syntax": [
                "urlencode(string)"
              ],
              "description": "applies URL encoding to a given string.",
              "full": [
                "---",
                "page_title: urlencode - Functions - Configuration Language",
                "description: The urlencode function applies URL encoding to a given string.",
                "---",
                "",
                "# `urlencode` Function",
                "",
                "`urlencode` applies URL encoding to a given string.",
                "",
                "This function identifies characters in the given string that would have a",
                "special meaning when included as a query string argument in a URL and",
                "escapes them using",
                "[RFC 3986 \"percent encoding\"](https://tools.ietf.org/html/rfc3986#section-2.1).",
                "",
                "The exact set of characters escaped may change over time, but the result",
                "is guaranteed to be interpolatable into a query string argument without",
                "inadvertently introducing additional delimiters.",
                "",
                "If the given string contains non-ASCII characters, these are first encoded as",
                "UTF-8 and then percent encoding is applied separately to each UTF-8 byte.",
                "",
                "## Examples",
                "",
                "```",
                "> urlencode(\"Hello World!\")",
                "Hello+World%21",
                "> urlencode(\"☃\")",
                "%E2%98%83",
                "> \"http://example.com/search?q=${urlencode(\"terraform urlencode\")}\"",
                "http://example.com/search?q=terraform+urlencode",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/yamldecode",
              "id": "encoding_functions.yamldecode",
              "title": "yamldecode",
              "syntax": [
                "yamldecode(string)"
              ],
              "description": "parses a string as a subset of YAML, and produces a representation of its value.",
              "full": [
                "---",
                "page_title: yamldecode - Functions - Configuration Language",
                "description: |-",
                "  The yamldecode function decodes a YAML string into a representation of its",
                "  value.",
                "---",
                "",
                "# `yamldecode` Function",
                "",
                "`yamldecode` parses a string as a subset of YAML, and produces a representation",
                "of its value.",
                "",
                "This function supports a subset of [YAML 1.2](https://yaml.org/spec/1.2/spec.html),",
                "as described below.",
                "",
                "This function maps YAML values to",
                "[Terraform language values](/terraform/language/expressions/types)",
                "in the following way:",
                "",
                "| YAML type     | Terraform type                                                     |",
                "| ------------- | ------------------------------------------------------------------ |",
                "| `!!str`       | `string`                                                           |",
                "| `!!float`     | `number`                                                           |",
                "| `!!int`       | `number`                                                           |",
                "| `!!bool`      | `bool`                                                             |",
                "| `!!map`       | `object(...)` with attribute types determined per this table       |",
                "| `!!seq`       | `tuple(...)` with element types determined per this table          |",
                "| `!!null`      | The Terraform language `null` value                                |",
                "| `!!timestamp` | `string` in [RFC 3339](https://tools.ietf.org/html/rfc3339) format |",
                "| `!!binary`    | `string` containing base64-encoded representation                  |",
                "",
                "The Terraform language automatic type conversion rules mean that you don't",
                "usually need to worry about exactly what type is produced for a given value,",
                "and can just use the result in an intuitive way.",
                "",
                "Note though that the mapping above is ambiguous -- several different source",
                "types map to the same target type -- and so round-tripping through `yamldecode`",
                "and then `yamlencode` cannot produce an identical result.",
                "",
                "YAML is a complex language and it supports a number of possibilities that the",
                "Terraform language's type system cannot represent. Therefore this YAML decoder",
                "supports only a subset of YAML 1.2, with restrictions including the following:",
                "",
                "- Although aliases to earlier anchors are supported, cyclic data structures",
                "  (where a reference to a collection appears inside that collection) are not.",
                "  If `yamldecode` detects such a structure then it will return an error.",
                "",
                "- Only the type tags shown in the above table (or equivalent alternative",
                "  representations of those same tags) are supported. Any other tags will",
                "  result in an error.",
                "",
                "- Only one YAML document is permitted. If multiple documents are present in",
                "  the given string then this function will return an error.",
                "",
                "## Examples",
                "",
                "```",
                "> yamldecode(\"hello: world\")",
                "{",
                "  \"hello\" = \"world\"",
                "}",
                "",
                "> yamldecode(\"true\")",
                "true",
                "",
                "> yamldecode(\"{a: &foo [1, 2, 3], b: *foo}\")",
                "{",
                "  \"a\" = [",
                "    1,",
                "    2,",
                "    3,",
                "  ]",
                "  \"b\" = [",
                "    1,",
                "    2,",
                "    3,",
                "  ]",
                "}",
                "",
                "> yamldecode(\"{a: &foo [1, *foo, 3]}\")",
                "",
                "Error: Error in function call",
                "",
                "Call to function \"yamldecode\" failed: cannot refer to anchor \"foo\" from inside",
                "its own definition.",
                "",
                "> yamldecode(\"{a: !not-supported foo}\")",
                "",
                "Error: Error in function call",
                "",
                "Call to function \"yamldecode\" failed: unsupported tag \"!not-supported\".",
                "```",
                "",
                "## Related Functions",
                "",
                "- [`jsondecode`](/terraform/language/functions/jsondecode) is a similar operation using JSON instead",
                "  of YAML.",
                "- [`yamlencode`](/terraform/language/functions/yamlencode) performs the opposite operation, _encoding_",
                "  a value as YAML."
              ]
            },
            {
              "path": "/terraform/language/functions/yamlencode",
              "id": "encoding_functions.yamlencode",
              "title": "yamlencode",
              "syntax": [
                "yamlencode(object)"
              ],
              "description": "encodes a given value to a string using YAML 1.2",
              "full": [
                "---",
                "page_title: yamlencode - Functions - Configuration Language",
                "description: The yamlencode function encodes a given value as a YAML string.",
                "---",
                "",
                "# `yamlencode` Function",
                "",
                "`yamlencode` encodes a given value to a string using",
                "[YAML 1.2](https://yaml.org/spec/1.2/spec.html) block syntax.",
                "",
                "This function maps",
                "[Terraform language values](/terraform/language/expressions/types)",
                "to YAML tags in the following way:",
                "",
                "| Terraform type | YAML type            |",
                "| -------------- | -------------------- |",
                "| `string`       | `!!str`              |",
                "| `number`       | `!!float` or `!!int` |",
                "| `bool`         | `!!bool`             |",
                "| `list(...)`    | `!!seq`              |",
                "| `set(...)`     | `!!seq`              |",
                "| `tuple(...)`   | `!!seq`              |",
                "| `map(...)`     | `!!map`              |",
                "| `object(...)`  | `!!map`              |",
                "| Null value     | `!!null`             |",
                "",
                "`yamlencode` uses the implied syntaxes for all of the above types, so it does",
                "not generate explicit YAML tags.",
                "",
                "Because the YAML format cannot fully represent all of the Terraform language",
                "types, passing the `yamlencode` result to `yamldecode` will not produce an",
                "identical value, but the Terraform language automatic type conversion rules",
                "mean that this is rarely a problem in practice.",
                "",
                "YAML is a superset of JSON, and so where possible we recommend generating",
                "JSON using [`jsonencode`](/terraform/language/functions/jsonencode) instead, even if",
                "a remote system supports YAML. JSON syntax is equivalent to flow-style YAML",
                "and Terraform can present detailed structural change information for JSON",
                "values in plans, whereas Terraform will treat block-style YAML just as a normal",
                "multi-line string. However, generating YAML may improve readability if the",
                "resulting value will be directly read or modified in the remote system by",
                "humans.",
                "",
                "## Examples",
                "",
                "```",
                "> yamlencode({\"a\":\"b\", \"c\":\"d\"})",
                "\"a\": \"b\"",
                "\"c\": \"d\"",
                "",
                "> yamlencode({\"foo\":[1, 2, 3], \"bar\": \"baz\"})",
                "\"bar\": \"baz\"",
                "\"foo\":",
                "- 1",
                "- 2",
                "- 3",
                "",
                "> yamlencode({\"foo\":[1, {\"a\":\"b\",\"c\":\"d\"}, 3], \"bar\": \"baz\"})",
                "\"bar\": \"baz\"",
                "\"foo\":",
                "- 1",
                "- \"a\": \"b\"",
                "  \"c\": \"d\"",
                "- 3",
                "```",
                "",
                "`yamlencode` always uses YAML's \"block style\" for mappings and sequences, unless",
                "the mapping or sequence is empty. To generate flow-style YAML, use",
                "[`jsonencode`](/terraform/language/functions/jsonencode) instead: YAML flow-style is a superset",
                "of JSON syntax.",
                "",
                "## Related Functions",
                "",
                "- [`jsonencode`](/terraform/language/functions/jsonencode) is a similar operation using JSON instead",
                "  of YAML.",
                "- [`yamldecode`](/terraform/language/functions/yamldecode) performs the opposite operation, _decoding_",
                "  a YAML string to obtain its represented value."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.filesystem_functions",
          "title": "Filesystem Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/abspath",
              "id": "filesystem_functions.abspath",
              "title": "abspath",
              "syntax": [
                "abspath(path)"
              ],
              "description": "takes a string containing a filesystem path and converts it to an absolute path.",
              "full": [
                "---",
                "page_title: abspath - Functions - Configuration Language",
                "description: The abspath function converts the argument to an absolute filesystem path.",
                "---",
                "",
                "# `abspath` Function",
                "",
                "`abspath` takes a string containing a filesystem path and converts it",
                "to an absolute path. That is, if the path is not absolute, it will be joined",
                "with the current working directory.",
                "",
                "Referring directly to filesystem paths in resource arguments may cause",
                "spurious diffs if the same configuration is applied from multiple systems or on",
                "different host operating systems. We recommend using filesystem paths only",
                "for transient values, such as the argument to [`file`](/terraform/language/functions/file) (where",
                "only the contents are then stored) or in `connection` and `provisioner` blocks.",
                "",
                "## Examples",
                "",
                "```",
                "> abspath(path.root)",
                "/home/user/some/terraform/root",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/dirname",
              "id": "filesystem_functions.dirname",
              "title": "dirname",
              "syntax": [
                "dirname(path)"
              ],
              "description": "takes a string containing a filesystem path and removes the last portion from it.",
              "full": [
                "---",
                "page_title: dirname - Functions - Configuration Language",
                "description: The dirname function removes the last portion from a filesystem path.",
                "---",
                "",
                "# `dirname` Function",
                "",
                "`dirname` takes a string containing a filesystem path and removes the last",
                "portion from it.",
                "",
                "This function works only with the path string and does not access the",
                "filesystem itself. It is therefore unable to take into account filesystem",
                "features such as symlinks.",
                "",
                "If the path is empty then the result is `\".\"`, representing the current",
                "working directory.",
                "",
                "The behavior of this function depends on the host platform. On Windows systems,",
                "it uses backslash `\\` as the path segment separator. On Unix systems, the slash",
                "`/` is used. The result of this function is normalized, so on a Windows system",
                "any slashes in the given path will be replaced by backslashes before returning.",
                "",
                "Referring directly to filesystem paths in resource arguments may cause",
                "spurious diffs if the same configuration is applied from multiple systems or on",
                "different host operating systems. We recommend using filesystem paths only",
                "for transient values, such as the argument to [`file`](/terraform/language/functions/file) (where",
                "only the contents are then stored) or in `connection` and `provisioner` blocks.",
                "",
                "## Examples",
                "",
                "```",
                "> dirname(\"foo/bar/baz.txt\")",
                "foo/bar",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`basename`](/terraform/language/functions/basename) returns _only_ the last portion of a filesystem",
                "  path, discarding the portion that would be returned by `dirname`."
              ]
            },
            {
              "path": "/terraform/language/functions/pathexpand",
              "id": "filesystem_functions.pathexpand",
              "title": "pathexpand",
              "syntax": [
                "pathexpand(path)"
              ],
              "description": "takes a filesystem path that might begin with a `~` segment, and if so it replaces that segment with the current user's home directory path.",
              "full": [
                "---",
                "page_title: pathexpand - Functions - Configuration Language",
                "description: |-",
                "  The pathexpand function expands a leading ~ character to the current user's",
                "  home directory.",
                "---",
                "",
                "# `pathexpand` Function",
                "",
                "`pathexpand` takes a filesystem path that might begin with a `~` segment,",
                "and if so it replaces that segment with the current user's home directory",
                "path.",
                "",
                "This function works only with the path string and does not access the",
                "filesystem itself. It is therefore unable to take into account filesystem",
                "features such as symlinks.",
                "",
                "If the leading segment in the path is not `~` then the given path is returned",
                "unmodified.",
                "",
                "Using this function in resource arguments will cause spurious diffs if the",
                "same configuration is run by multiple users with different home directory",
                "paths, or used on different host operating systems. We recommend using this",
                "function only for transient values, such as in `connection` and `provisioner`",
                "blocks to locate SSH keys, etc.",
                "",
                "The rules for determining the \"home directory\" for the current user vary",
                "depending on host operating system.",
                "",
                "**For Unix systems**, the following sources are consulted, in order of preference:",
                "",
                "* The `HOME` environment variable.",
                "* The result of running `getent passwd` followed by the Terraform process uid.",
                "* The result of running `cd && pwd` in `sh`.",
                "",
                "**For Windows systems**, there is not really the concept of a home directory",
                "in the same sense as on Unix, but the following sources are consulted in",
                "order of preference:",
                "",
                "* The `HOME` environment variable.",
                "* The `HOMEDRIVE` and `HOMEPATH` environment variables, if both are set.",
                "* The `USERPROFILE` environment variable.",
                "",
                "The exact rules employed for each operating system may change in future",
                "releases of Terraform.",
                "",
                "## Examples",
                "",
                "```",
                "> pathexpand(\"~/.ssh/id_rsa\")",
                "/home/steve/.ssh/id_rsa",
                "> pathexpand(\"/etc/resolv.conf\")",
                "/etc/resolv.conf",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/basename",
              "id": "filesystem_functions.basename",
              "title": "basename",
              "syntax": [
                "basename(path)"
              ],
              "description": "takes a string containing a filesystem path and removes all except the last portion from it.",
              "full": [
                "---",
                "page_title: basename - Functions - Configuration Language",
                "description: |-",
                "  The basename function removes all except the last portion from a filesystem",
                "  path.",
                "---",
                "",
                "# `basename` Function",
                "",
                "`basename` takes a string containing a filesystem path and removes all except",
                "the last portion from it.",
                "",
                "This function works only with the path string and does not access the",
                "filesystem itself. It is therefore unable to take into account filesystem",
                "features such as symlinks.",
                "",
                "If the path is empty then the result is `\".\"`, representing the current",
                "working directory.",
                "",
                "The behavior of this function depends on the host platform. On Windows systems,",
                "it uses backslash `\\` as the path segment separator. On Unix systems, the slash",
                "`/` is used.",
                "",
                "Referring directly to filesystem paths in resource arguments may cause",
                "spurious diffs if the same configuration is applied from multiple systems or on",
                "different host operating systems. We recommend using filesystem paths only",
                "for transient values, such as the argument to [`file`](/terraform/language/functions/file) (where",
                "only the contents are then stored) or in `connection` and `provisioner` blocks.",
                "",
                "## Examples",
                "",
                "```",
                "> basename(\"foo/bar/baz.txt\")",
                "baz.txt",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`dirname`](/terraform/language/functions/dirname) returns all of the segments of a filesystem path",
                "  _except_ the last, discarding the portion that would be returned by",
                "  `basename`."
              ]
            },
            {
              "path": "/terraform/language/functions/file",
              "id": "filesystem_functions.file",
              "title": "file",
              "syntax": [
                "file(path)"
              ],
              "description": "reads the contents of a file at the given path and returns them as a string.",
              "full": [
                "---",
                "page_title: file - Functions - Configuration Language",
                "description: |-",
                "  The file function reads the contents of the file at the given path and",
                "  returns them as a string.",
                "---",
                "",
                "# `file` Function",
                "",
                "`file` reads the contents of a file at the given path and returns them as",
                "a string.",
                "",
                "```hcl",
                "file(path)",
                "```",
                "",
                "Strings in the Terraform language are sequences of Unicode characters, so",
                "this function will interpret the file contents as UTF-8 encoded text and",
                "return the resulting Unicode characters. If the file contains invalid UTF-8",
                "sequences then this function will produce an error.",
                "",
                "This function can be used only with files that already exist on disk",
                "at the beginning of a Terraform run. Functions do not participate in the",
                "dependency graph, so this function cannot be used with files that are generated",
                "dynamically during a Terraform operation. We do not recommend using dynamic",
                "local files in Terraform configurations, but in rare situations where this is",
                "necessary you can use",
                "[the `local_file` data source](https://registry.terraform.io/providers/hashicorp/local/latest/docs/data-sources/file)",
                "to read files while respecting resource dependencies.",
                "",
                "## Examples",
                "",
                "```",
                "> file(\"${path.module}/hello.txt\")",
                "Hello World",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filebase64`](/terraform/language/functions/filebase64) also reads the contents of a given file,",
                "  but returns the raw bytes in that file Base64-encoded, rather than",
                "  interpreting the contents as UTF-8 text.",
                "* [`fileexists`](/terraform/language/functions/fileexists) determines whether a file exists",
                "  at a given path.",
                "* [`templatefile`](/terraform/language/functions/templatefile) renders using a file from disk as a",
                "  template."
              ]
            },
            {
              "path": "/terraform/language/functions/fileexists",
              "id": "filesystem_functions.fileexists",
              "title": "fileexists",
              "syntax": [
                "fileexists(path)"
              ],
              "description": "determines whether a file exists at a given path.",
              "full": [
                "---",
                "page_title: fileexists - Functions - Configuration Language",
                "description: The fileexists function determines whether a file exists at a given path.",
                "---",
                "",
                "# `fileexists` Function",
                "",
                "`fileexists` determines whether a file exists at a given path.",
                "",
                "```hcl",
                "fileexists(path)",
                "```",
                "",
                "Functions are evaluated during configuration parsing rather than at apply time,",
                "so this function can only be used with files that are already present on disk",
                "before Terraform takes any actions.",
                "",
                "This function works only with regular files. If used with a directory, FIFO,",
                "or other special mode, it will return an error.",
                "",
                "## Examples",
                "",
                "```",
                "> fileexists(\"${path.module}/hello.txt\")",
                "true",
                "```",
                "",
                "```hcl",
                "fileexists(\"custom-section.sh\") ? file(\"custom-section.sh\") : local.default_content",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`file`](/terraform/language/functions/file) reads the contents of a file at a given path"
              ]
            },
            {
              "path": "/terraform/language/functions/fileset",
              "id": "filesystem_functions.fileset",
              "title": "fileset",
              "syntax": [
                "fileset(path, pattern)"
              ],
              "description": "enumerates a set of regular file names given a path and pattern.",
              "full": [
                "---",
                "page_title: fileset - Functions - Configuration Language",
                "description: The fileset function enumerates a set of regular file names given a pattern.",
                "---",
                "",
                "# `fileset` Function",
                "",
                "`fileset` enumerates a set of regular file names given a path and pattern.",
                "The path is automatically removed from the resulting set of file names and any",
                "result still containing path separators always returns forward slash (`/`) as",
                "the path separator for cross-system compatibility.",
                "",
                "```hcl",
                "fileset(path, pattern)",
                "```",
                "",
                "Supported pattern matches:",
                "",
                "- `*` - matches any sequence of non-separator characters",
                "- `**` - matches any sequence of characters, including separator characters",
                "- `?` - matches any single non-separator character",
                "- `{alternative1,...}` - matches a sequence of characters if one of the comma-separated alternatives matches",
                "- `[CLASS]` - matches any single non-separator character inside a class of characters (see below)",
                "- `[^CLASS]` - matches any single non-separator character outside a class of characters (see below)",
                "",
                "Note that the doublestar (`**`) must appear as a path component by itself. A",
                "pattern such as /path\\*\\* is invalid and will be treated the same as /path\\*, but",
                "/path\\*/\\*\\* should achieve the desired result.",
                "",
                "Character classes support the following:",
                "",
                "- `[abc]` - matches any single character within the set",
                "- `[a-z]` - matches any single character within the range",
                "",
                "Functions are evaluated during configuration parsing rather than at apply time,",
                "so this function can only be used with files that are already present on disk",
                "before Terraform takes any actions.",
                "",
                "## Examples",
                "",
                "```",
                "> fileset(path.module, \"files/*.txt\")",
                "[",
                "  \"files/hello.txt\",",
                "  \"files/world.txt\",",
                "]",
                "",
                "> fileset(path.module, \"files/{hello,world}.txt\")",
                "[",
                "  \"files/hello.txt\",",
                "  \"files/world.txt\",",
                "]",
                "",
                "> fileset(\"${path.module}/files\", \"*\")",
                "[",
                "  \"hello.txt\",",
                "  \"world.txt\",",
                "]",
                "",
                "> fileset(\"${path.module}/files\", \"**\")",
                "[",
                "  \"hello.txt\",",
                "  \"world.txt\",",
                "  \"subdirectory/anotherfile.txt\",",
                "]",
                "```",
                "",
                "A common use of `fileset` is to create one resource instance per matched file, using",
                "[the `for_each` meta-argument](/terraform/language/meta-arguments/for_each):",
                "",
                "```hcl",
                "resource \"example_thing\" \"example\" {",
                "  for_each = fileset(path.module, \"files/*\")",
                "",
                "  # other configuration using each.value",
                "}",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/filebase64",
              "id": "filesystem_functions.filebase64",
              "title": "filebase64",
              "syntax": [
                "filebase64(path)"
              ],
              "description": "reads the contents of a file at the given path and returns them as a base64-encoded string.",
              "full": [
                "---",
                "page_title: filebase64 - Functions - Configuration Language",
                "description: |-",
                "  The filebase64 function reads the contents of the file at the given path and",
                "  returns them as a base64-encoded string.",
                "---",
                "",
                "# `filebase64` Function",
                "",
                "`filebase64` reads the contents of a file at the given path and returns them as",
                "a base64-encoded string.",
                "",
                "```hcl",
                "filebase64(path)",
                "```",
                "",
                "The result is a Base64 representation of the raw bytes in the given file.",
                "Strings in the Terraform language are sequences of Unicode characters, so",
                "Base64 is the standard way to represent raw binary data that cannot be",
                "interpreted as Unicode characters. Resource types that operate on binary",
                "data will accept this data encoded in Base64, thus avoiding the need to",
                "decode the result of this function.",
                "",
                "Terraform uses the \"standard\" Base64 alphabet as defined in",
                "[RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "This function can be used only with functions that already exist as static",
                "files on disk at the beginning of a Terraform run. Language functions do not",
                "participate in the dependency graph, so this function cannot be used with",
                "files that are generated dynamically during a Terraform operation.",
                "",
                "## Examples",
                "",
                "```",
                "> filebase64(\"${path.module}/hello.txt\")",
                "SGVsbG8gV29ybGQ=",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`file`](/terraform/language/functions/file) also reads the contents of a given file,",
                "  but interprets the data as UTF-8 text and returns the result directly",
                "  as a string, without any further encoding.",
                "* [`base64decode`](/terraform/language/functions/base64decode) can decode a Base64 string representing",
                "  bytes in UTF-8, but in practice `base64decode(filebase64(...))` is equivalent",
                "  to the shorter expression `file(...)`."
              ]
            },
            {
              "path": "/terraform/language/functions/templatefile",
              "id": "filesystem_functions.templatefile",
              "title": "templatefile",
              "syntax": [
                "templatefile(path)"
              ],
              "description": "reads the file at the given path and renders its content as a template.",
              "full": [
                "---",
                "page_title: templatefile - Functions - Configuration Language",
                "description: |-",
                "  The templatefile function reads the file at the given path and renders its",
                "  content as a template.",
                "---",
                "",
                "# `templatefile` Function",
                "",
                "`templatefile` reads the file at the given path and renders its content",
                "as a template using a supplied set of template variables.",
                "",
                "```hcl",
                "templatefile(path, vars)",
                "```",
                "",
                "The template syntax is the same as for",
                "[string templates](/terraform/language/expressions/strings#string-templates)",
                "in the main Terraform language, including interpolation sequences delimited with",
                "`${` ... `}`. This function just allows longer template sequences to be factored",
                "out into a separate file for readability.",
                "",
                "The \"vars\" argument must be an object. Within the template file, each of the",
                "keys in the map is available as a variable for interpolation. The template may",
                "also use any other function available in the Terraform language, except that",
                "recursive calls to `templatefile` are not permitted. Variable names must",
                "each start with a letter, followed by zero or more letters, digits, or",
                "underscores.",
                "",
                "Strings in the Terraform language are sequences of Unicode characters, so",
                "this function will interpret the file contents as UTF-8 encoded text and",
                "return the resulting Unicode characters. If the file contains invalid UTF-8",
                "sequences then this function will produce an error.",
                "",
                "This function can be used only with files that already exist on disk at the",
                "beginning of a Terraform run. Functions do not participate in the dependency",
                "graph, so this function cannot be used with files that are generated",
                "dynamically during a Terraform operation.",
                "",
                "`*.tftpl` is the recommended naming pattern to use for your template files.",
                "Terraform will not prevent you from using other names, but following this",
                "convention will help your editor understand the content and likely provide",
                "better editing experience as a result.",
                "",
                "## Examples",
                "",
                "### Lists",
                "",
                "Given a template file `backends.tftpl` with the following content:",
                "",
                "```",
                "%{ for addr, port in ip_addrs ~}",
                "backend ${addr}:${port}",
                "%{ endfor ~}",
                "```",
                "",
                "The `templatefile` function renders the template:",
                "",
                "```",
                "> templatefile(\"${path.module}/backends.tftpl\", { port = 8080, ip_addrs = [\"10.0.0.1\", \"10.0.0.2\"] })",
                "backend 10.0.0.1:8080",
                "backend 10.0.0.2:8080",
                "",
                "```",
                "",
                "### Maps",
                "",
                "Given a template file `config.tftpl` with the following content:",
                "",
                "```",
                "%{ for config_key, config_value in config }",
                "set ${config_key} = ${config_value}",
                "%{ endfor ~}",
                "```",
                "",
                "The `templatefile` function renders the template:",
                "",
                "```",
                "> templatefile(",
                "               \"${path.module}/config.tftpl\",",
                "               {",
                "                 config = {",
                "                   \"x\"   = \"y\"",
                "                   \"foo\" = \"bar\"",
                "                   \"key\" = \"value\"",
                "                 }",
                "               }",
                "              )",
                "set foo = bar",
                "set key = value",
                "set x = y",
                "```",
                "",
                "### Generating JSON or YAML from a template",
                "",
                "If the string you want to generate will be in JSON or YAML syntax, it's",
                "often tricky and tedious to write a template that will generate valid JSON or",
                "YAML that will be interpreted correctly when using lots of individual",
                "interpolation sequences and directives.",
                "",
                "Instead, you can write a template that consists only of a single interpolated",
                "call to either [`jsonencode`](/terraform/language/functions/jsonencode) or",
                "[`yamlencode`](/terraform/language/functions/yamlencode), specifying the value to encode using",
                "[normal Terraform expression syntax](/terraform/language/expressions)",
                "as in the following examples:",
                "",
                "```",
                "${jsonencode({",
                "  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],",
                "})}",
                "```",
                "",
                "```",
                "${yamlencode({",
                "  \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],",
                "})}",
                "```",
                "",
                "Given the same input as the `backends.tftpl` example in the previous section,",
                "this will produce a valid JSON or YAML representation of the given data",
                "structure, without the need to manually handle escaping or delimiters.",
                "In the latest examples above, the repetition based on elements of `ip_addrs` is",
                "achieved by using a",
                "[`for` expression](/terraform/language/expressions/for)",
                "rather than by using",
                "[template directives](/terraform/language/expressions/strings#directives).",
                "",
                "```json",
                "{\"backends\":[\"10.0.0.1:8080\",\"10.0.0.2:8080\"]}",
                "```",
                "",
                "If the resulting template is small, you can choose instead to write",
                "`jsonencode` or `yamlencode` calls inline in your main configuration files, and",
                "avoid creating separate template files at all:",
                "",
                "```hcl",
                "locals {",
                "  backend_config_json = jsonencode({",
                "    \"backends\": [for addr in ip_addrs : \"${addr}:${port}\"],",
                "  })",
                "}",
                "```",
                "",
                "For more information, see the main documentation for",
                "[`jsonencode`](/terraform/language/functions/jsonencode) and [`yamlencode`](/terraform/language/functions/yamlencode).",
                "",
                "## Related Functions",
                "",
                "* [`file`](/terraform/language/functions/file) reads a file from disk and returns its literal contents",
                "  without any template interpretation."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.date_and_time_functions",
          "title": "Date and Time Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/formatdate",
              "id": "date_and_time_functions.formatdate",
              "title": "formatdate",
              "syntax": [
                "formatdate(pattern, timestamp)"
              ],
              "description": "converts a timestamp into a different time format.",
              "full": [
                "---",
                "page_title: formatdate - Functions - Configuration Language",
                "description: The formatdate function converts a timestamp into a different time format.",
                "---",
                "",
                "# `formatdate` Function",
                "",
                "`formatdate` converts a timestamp into a different time format.",
                "",
                "```hcl",
                "formatdate(spec, timestamp)",
                "```",
                "",
                "In the Terraform language, timestamps are conventionally represented as",
                "strings using [RFC 3339](https://tools.ietf.org/html/rfc3339)",
                "\"Date and Time format\" syntax. `formatdate` requires the `timestamp` argument",
                "to be a string conforming to this syntax.",
                "",
                "## Examples",
                "",
                "```",
                "> formatdate(\"DD MMM YYYY hh:mm ZZZ\", \"2018-01-02T23:12:01Z\")",
                "02 Jan 2018 23:12 UTC",
                "> formatdate(\"EEEE, DD-MMM-YY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01Z\")",
                "Tuesday, 02-Jan-18 23:12:01 UTC",
                "> formatdate(\"EEE, DD MMM YYYY hh:mm:ss ZZZ\", \"2018-01-02T23:12:01-08:00\")",
                "Tue, 02 Jan 2018 23:12:01 -0800",
                "> formatdate(\"MMM DD, YYYY\", \"2018-01-02T23:12:01Z\")",
                "Jan 02, 2018",
                "> formatdate(\"HH:mmaa\", \"2018-01-02T23:12:01Z\")",
                "11:12pm",
                "```",
                "",
                "## Specification Syntax",
                "",
                "The format specification is a string that includes formatting sequences from",
                "the following table. This function is intended for producing common",
                "_machine-oriented_ timestamp formats such as those defined in RFC822, RFC850,",
                "and RFC1123. It is not suitable for truly human-oriented date formatting",
                "because it is not locale-aware. In particular, it can produce month and day",
                "names only in English.",
                "",
                "The specification may contain the following sequences:",
                "",
                "| Sequence | Result                                                                  |",
                "| -------- | ----------------------------------------------------------------------- |",
                "| `YYYY`   | Four (or more) digit year, like \"2006\".                                 |",
                "| `YY`     | The year modulo 100, zero padded to at least two digits, like \"06\".     |",
                "| `MMMM`   | English month name unabbreviated, like \"January\".                       |",
                "| `MMM`    | English month name abbreviated to three letters, like \"Jan\".            |",
                "| `MM`     | Month number zero-padded to two digits, like \"01\" for January.          |",
                "| `M`      | Month number with no padding, like \"1\" for January.                     |",
                "| `DD`     | Day of month number zero-padded to two digits, like \"02\".               |",
                "| `D`      | Day of month number with no padding, like \"2\".                          |",
                "| `EEEE`   | English day of week name unabbreviated, like \"Monday\".                  |",
                "| `EEE`    | English day of week name abbreviated to three letters, like \"Mon\".      |",
                "| `hh`     | 24-hour number zero-padded to two digits, like \"02\".                    |",
                "| `h`      | 24-hour number unpadded, like \"2\".                                      |",
                "| `HH`     | 12-hour number zero-padded to two digits, like \"02\".                    |",
                "| `H`      | 12-hour number unpadded, like \"2\".                                      |",
                "| `AA`     | Hour AM/PM marker in uppercase, like \"AM\".                              |",
                "| `aa`     | Hour AM/PM marker in lowercase, like \"am\".                              |",
                "| `mm`     | Minute within hour zero-padded to two digits, like \"05\".                |",
                "| `m`      | Minute within hour unpadded, like \"5\".                                  |",
                "| `ss`     | Second within minute zero-padded to two digits, like \"09\".              |",
                "| `s`      | Second within minute, like \"9\".                                         |",
                "| `ZZZZZ`  | Timezone offset with colon separating hours and minutes, like \"-08:00\". |",
                "| `ZZZZ`   | Timezone offset with just sign and digit, like \"-0800\".                 |",
                "| `ZZZ`    | Like `ZZZZ` but with a special case \"UTC\" for UTC.                      |",
                "| `Z`      | Like `ZZZZZ` but with a special case \"Z\" for UTC.                       |",
                "",
                "Any non-letter characters, such as punctuation, are reproduced verbatim in the",
                "output. To include literal letters in the format string, enclose them in single",
                "quotes `'`. To include a literal quote, escape it by doubling the quotes.",
                "",
                "```",
                "> formatdate(\"h'h'mm\", \"2018-01-02T23:12:01-08:00\")",
                "23h12",
                "> formatdate(\"H 'o''clock'\", \"2018-01-02T23:12:01-08:00\")",
                "11 o'clock",
                "```",
                "",
                "This format specification syntax is intended to make it easy for a reader",
                "to guess which format will result even if they are not experts on the syntax.",
                "Therefore there are no predefined shorthands for common formats, but format",
                "strings for various RFC-specified formats are given below to be copied into your",
                "configuration as needed:",
                "",
                "- [RFC 822](https://tools.ietf.org/html/rfc822#section-5) and",
                "  [RFC RFC 2822](https://tools.ietf.org/html/rfc2822#section-3.3):",
                "  `\"DD MMM YYYY hh:mm ZZZ\"`",
                "- [RFC 850](https://tools.ietf.org/html/rfc850#section-2.1.4):",
                "  `\"EEEE, DD-MMM-YY hh:mm:ss ZZZ\"`",
                "- [RFC 1123](https://tools.ietf.org/html/rfc1123#section-5.2.14):",
                "  `\"EEE, DD MMM YYYY hh:mm:ss ZZZ\"`",
                "- [RFC 3339](https://tools.ietf.org/html/rfc3339):",
                "  `\"YYYY-MM-DD'T'hh:mm:ssZ\"` (but this is also the input format, so such a",
                "  conversion is redundant.)",
                "",
                "## Related Functions",
                "",
                "- [`format`](/terraform/language/functions/format) is a more general formatting function for arbitrary",
                "  data.",
                "- [`timestamp`](/terraform/language/functions/timestamp) returns the current date and time in a format",
                "  suitable for input to `formatdate`."
              ]
            },
            {
              "path": "/terraform/language/functions/timeadd",
              "id": "date_and_time_functions.timeadd",
              "title": "timeadd",
              "syntax": [
                "timeadd(timestamp, duration)"
              ],
              "description": "adds a duration to a timestamp, returning a new timestamp.",
              "full": [
                "---",
                "page_title: timeadd - Functions - Configuration Language",
                "description: |-",
                "  The timeadd function adds a duration to a timestamp, returning a new",
                "  timestamp.",
                "---",
                "",
                "# `timeadd` Function",
                "",
                "`timeadd` adds a duration to a timestamp, returning a new timestamp.",
                "",
                "```hcl",
                "timeadd(timestamp, duration)",
                "```",
                "",
                "In the Terraform language, timestamps are conventionally represented as",
                "strings using [RFC 3339](https://tools.ietf.org/html/rfc3339)",
                "\"Date and Time format\" syntax. `timeadd` requires the `timestamp` argument",
                "to be a string conforming to this syntax.",
                "",
                "`duration` is a string representation of a time difference, consisting of",
                "sequences of number and unit pairs, like `\"1.5h\"` or `\"1h30m\"`. The accepted",
                "units are `\"ns\"`, `\"us\"` (or `\"µs\"`), `\"ms\"`, `\"s\"`, `\"m\"`, and `\"h\"`. The first",
                "number may be negative to indicate a negative duration, like `\"-2h5m\"`.",
                "",
                "The result is a string, also in RFC 3339 format, representing the result",
                "of adding the given direction to the given timestamp.",
                "",
                "## Examples",
                "",
                "```",
                "> timeadd(\"2017-11-22T00:00:00Z\", \"10m\")",
                "2017-11-22T00:10:00Z",
                "```",
                "",
                "# Related Functions",
                "",
                "* [`timecmp`](/terraform/language/functions/timecmp) determines an ordering for two timestamps."
              ]
            },
            {
              "path": "/terraform/language/functions/timecmp",
              "id": "date_and_time_functions.timecmp",
              "title": "timecmp",
              "syntax": [
                "timecmp(timestamp, timestamp)"
              ],
              "description": "compares two timestamps and returns a number that represents the timestamp.",
              "full": [
                "---",
                "page_title: timecmp - Functions - Configuration Language",
                "description: |-",
                "  The timecmp function adds a duration to a timestamp, returning a new",
                "  timestamp.",
                "---",
                "",
                "# `timecmp` Function",
                "",
                "`timecmp` compares two timestamps and returns a number that represents the",
                "ordering of the instants those timestamps represent.",
                "",
                "```hcl",
                "timecmp(timestamp_a, timestamp_b)",
                "```",
                "",
                "| Condition                                          | Return Value |",
                "|----------------------------------------------------|--------------|",
                "| `timestamp_a` is before `timestamp_b`              | `-1`         |",
                "| `timestamp_a` is the same instant as `timestamp_b` | `0`          |",
                "| `timestamp_a` is after `timestamp_b`               | `1`          |",
                "",
                "When comparing the timestamps, `timecmp` takes into account the UTC offsets",
                "given in each timestamp. For example, `06:00:00+0200` and `04:00:00Z` are",
                "the same instant after taking into account the `+0200` offset on the first",
                "timestamp.",
                "",
                "In the Terraform language, timestamps are conventionally represented as",
                "strings using [RFC 3339](https://tools.ietf.org/html/rfc3339)",
                "\"Date and Time format\" syntax. `timecmp` requires the its two arguments to",
                "both be strings conforming to this syntax.",
                "",
                "## Examples",
                "",
                "```",
                "> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T00:00:00Z\")",
                "0",
                "> timecmp(\"2017-11-22T00:00:00Z\", \"2017-11-22T01:00:00Z\")",
                "-1",
                "> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00Z\")",
                "1",
                "> timecmp(\"2017-11-22T01:00:00Z\", \"2017-11-22T00:00:00-01:00\")",
                "0",
                "```",
                "",
                "`timecmp` can be particularly useful in defining",
                "[custom condition checks](/terraform/language/expressions/custom-conditions) that",
                "involve a specified timestamp being within a particular range. For example,",
                "the following resource postcondition would raise an error if a TLS certificate",
                "(or other expiring object) expires sooner than 30 days from the time of",
                "the \"apply\" step:",
                "",
                "```hcl",
                "  lifecycle {",
                "    postcondition {",
                "      condition     = timecmp(timestamp(), timeadd(self.expiration_timestamp, \"-720h\")) < 0",
                "      error_message = \"Certificate will expire in less than 30 days.\"",
                "    }",
                "  }",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`timestamp`](/terraform/language/functions/timestamp) returns the current timestamp when it is evaluated",
                "  during the apply step.",
                "* [`timeadd`](/terraform/language/functions/timeadd) can perform arithmetic on timestamps by adding or removing a specified duration."
              ]
            },
            {
              "path": "/terraform/language/functions/timestamp",
              "id": "date_and_time_functions.timestamp",
              "title": "timestamp",
              "syntax": [
                "timestamp()"
              ],
              "description": "returns a UTC timestamp string in [RFC 3339](https://tools.ietf.org/html/rfc3339) format.",
              "full": [
                "---",
                "page_title: timestamp - Functions - Configuration Language",
                "description: |-",
                "  The timestamp function returns a string representation of the current date",
                "  and time.",
                "---",
                "",
                "# `timestamp` Function",
                "",
                "`timestamp` returns a UTC timestamp string in [RFC 3339](https://tools.ietf.org/html/rfc3339) format.",
                "",
                "In the Terraform language, timestamps are conventionally represented as",
                "strings using [RFC 3339](https://tools.ietf.org/html/rfc3339)",
                "\"Date and Time format\" syntax, and so `timestamp` returns a string",
                "in this format.",
                "",
                "The result of this function will change every second, so using this function",
                "directly with resource attributes will cause a diff to be detected on every",
                "Terraform run. We do not recommend using this function in resource attributes,",
                "but in rare cases it can be used in conjunction with",
                "[the `ignore_changes` lifecycle meta-argument](/terraform/language/meta-arguments/lifecycle#ignore_changes)",
                "to take the timestamp only on initial creation of the resource. For more stable",
                "time handling, see the [Time Provider](https://registry.terraform.io/providers/hashicorp/time).",
                "",
                "Due to the constantly changing return value, the result of this function cannot",
                "be predicted during Terraform's planning phase, and so the timestamp will be",
                "taken only once the plan is being applied.",
                "",
                "## Examples",
                "",
                "```",
                "> timestamp()",
                "2018-05-13T07:44:12Z",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`formatdate`](/terraform/language/functions/formatdate) can convert the resulting timestamp to",
                "  other date and time formats.",
                "* [`plantimestamp`](/terraform/language/functions/plantimestamp) will return a consistent timestamp",
                "  representing the date and time during the plan."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.hash_and_crypto_functions",
          "title": "Hash and Crypto Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/base64sha256",
              "id": "hash_and_crypto_functions.base64sha256",
              "title": "base64sha256",
              "syntax": [
                "base64sha256(string)"
              ],
              "description": "computes the SHA256 hash of a given string and encodes it with Base64.",
              "full": [
                "---",
                "page_title: base64sha256 - Functions - Configuration Language",
                "description: |-",
                "  The base64sha256 function computes the SHA256 hash of a given string and",
                "  encodes it with Base64.",
                "---",
                "",
                "# `base64sha256` Function",
                "",
                "`base64sha256` computes the SHA256 hash of a given string and encodes it with",
                "Base64. This is not equivalent to `base64encode(sha256(\"test\"))` since `sha256()`",
                "returns hexadecimal representation.",
                "",
                "The given string is first encoded as UTF-8 and then the SHA256 algorithm is applied",
                "as defined in [RFC 4634](https://tools.ietf.org/html/rfc4634). The raw hash is",
                "then encoded with Base64 before returning. Terraform uses the \"standard\" Base64",
                "alphabet as defined in [RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "## Examples",
                "",
                "```",
                "> base64sha256(\"hello world\")",
                "uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filebase64sha256`](/terraform/language/functions/filebase64sha256) calculates the same hash from",
                "  the contents of a file rather than from a string value.",
                "* [`sha256`](/terraform/language/functions/sha256) calculates the same hash but returns the result",
                "  in a more-verbose hexadecimal encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/base64sha512",
              "id": "hash_and_crypto_functions.base64sha512",
              "title": "base64sha512",
              "syntax": [
                "base64sha512(string)"
              ],
              "description": "computes the SHA512 hash of a given string and encodes it with Base64.",
              "full": [
                "---",
                "page_title: base64sha512 - Functions - Configuration Language",
                "description: |-",
                "  The base64sha512 function computes the SHA512 hash of a given string and",
                "  encodes it with Base64.",
                "---",
                "",
                "# `base64sha512` Function",
                "",
                "`base64sha512` computes the SHA512 hash of a given string and encodes it with",
                "Base64. This is not equivalent to `base64encode(sha512(\"test\"))` since `sha512()`",
                "returns hexadecimal representation.",
                "",
                "The given string is first encoded as UTF-8 and then the SHA512 algorithm is applied",
                "as defined in [RFC 4634](https://tools.ietf.org/html/rfc4634). The raw hash is",
                "then encoded with Base64 before returning. Terraform uses the \"standard\" Base64",
                "alphabet as defined in [RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "## Examples",
                "",
                "```",
                "> base64sha512(\"hello world\")",
                "MJ7MSJwS1utMxA9QyQLytNDtd+5RGnx6m808qG1M2G+YndNbxf9JlnDaNCVbRbDP2DDoH2Bdz33FVC6TrpzXbw==",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filebase64sha512`](/terraform/language/functions/filebase64sha512) calculates the same hash from",
                "  the contents of a file rather than from a string value.",
                "* [`sha512`](/terraform/language/functions/sha512) calculates the same hash but returns the result",
                "  in a more-verbose hexadecimal encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/bcrypt",
              "id": "hash_and_crypto_functions.bcrypt",
              "title": "bcrypt",
              "syntax": [
                "bcrypt(string, cost)"
              ],
              "description": "computes a hash of the given string using the Blowfish cipher.",
              "full": [
                "---",
                "page_title: bcrypt - Functions - Configuration Language",
                "description: |-",
                "  The bcrypt function computes a hash of the given string using the Blowfish",
                "  cipher.",
                "---",
                "",
                "# `bcrypt` Function",
                "",
                "`bcrypt` computes a hash of the given string using the Blowfish cipher,",
                "returning a string in",
                "[the _Modular Crypt Format_](https://passlib.readthedocs.io/en/stable/modular_crypt_format.html)",
                "usually expected in the shadow password file on many Unix systems.",
                "",
                "```hcl",
                "bcrypt(string, cost)",
                "```",
                "",
                "The `cost` argument is optional and will default to 10 if unspecified.",
                "",
                "Since a bcrypt hash value includes a randomly selected salt, each call to this",
                "function will return a different value, even if the given string and cost are",
                "the same. Using this function directly with resource arguments will therefore",
                "cause spurious diffs. We recommend using this function only in `provisioner`",
                "blocks, or in data resources whose results are only used in `provisioner`",
                "blocks.",
                "",
                "The version prefix on the generated string (e.g. `$2a$`) may change in future",
                "versions of Terraform.",
                "",
                "## Examples",
                "",
                "```",
                "> bcrypt(\"hello world\")",
                "$2a$10$D5grTTzcsqyvAeIAnY/mYOIqliCoG7eAMX0/oFcuD.iErkksEbcAa",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/filebase64sha256",
              "id": "hash_and_crypto_functions.filebase64sha256",
              "title": "filebase64sha256",
              "syntax": [
                "filebase64sha256(path)"
              ],
              "description": "is a variant of [`base64sha256`](/terraform/language/functions/base64sha256)",
              "full": [
                "---",
                "page_title: filebase64sha256 - Functions - Configuration Language",
                "description: |-",
                "  The filebase64sha256 function computes the SHA256 hash of the contents of",
                "  a given file and encodes it with Base64.",
                "---",
                "",
                "# `filebase64sha256` Function",
                "",
                "`filebase64sha256` is a variant of [`base64sha256`](/terraform/language/functions/base64sha256)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `base64sha256(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/filebase64sha512",
              "id": "hash_and_crypto_functions.filebase64sha512",
              "title": "filebase64sha512",
              "syntax": [
                "filebase64sha512(path)"
              ],
              "description": "is a variant of [`base64sha512`](/terraform/language/functions/base64sha512)",
              "full": [
                "---",
                "page_title: filebase64sha512 - Functions - Configuration Language",
                "description: |-",
                "  The filebase64sha512 function computes the SHA512 hash of the contents of",
                "  a given file and encodes it with Base64.",
                "---",
                "",
                "# `filebase64sha512` Function",
                "",
                "`filebase64sha512` is a variant of [`base64sha512`](/terraform/language/functions/base64sha512)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `base64sha512(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/filemd5",
              "id": "hash_and_crypto_functions.filemd5",
              "title": "filemd5",
              "syntax": [
                "filemd5(path)"
              ],
              "description": "is a variant of [`md5`](/terraform/language/functions/md5)",
              "full": [
                "---",
                "page_title: filemd5 - Functions - Configuration Language",
                "description: |-",
                "  The filemd5 function computes the MD5 hash of the contents of",
                "  a given file and encodes it as hex.",
                "---",
                "",
                "# `filemd5` Function",
                "",
                "`filemd5` is a variant of [`md5`](/terraform/language/functions/md5)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `md5(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/filesha1",
              "id": "hash_and_crypto_functions.filesha1",
              "title": "filesha1",
              "syntax": [
                "filesha1(path)"
              ],
              "description": "is a variant of [`sha1`](/terraform/language/functions/sha1)",
              "full": [
                "---",
                "page_title: filesha1 - Functions - Configuration Language",
                "description: |-",
                "  The filesha1 function computes the SHA1 hash of the contents of",
                "  a given file and encodes it as hex.",
                "---",
                "",
                "# `filesha1` Function",
                "",
                "`filesha1` is a variant of [`sha1`](/terraform/language/functions/sha1)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `sha1(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/filesha256",
              "id": "hash_and_crypto_functions.filesha256",
              "title": "filesha256",
              "syntax": [
                "filesha256(path)"
              ],
              "description": "is a variant of [`sha256`](/terraform/language/functions/sha256)",
              "full": [
                "---",
                "page_title: filesha256 - Functions - Configuration Language",
                "description: |-",
                "  The filesha256 function computes the SHA256 hash of the contents of",
                "  a given file and encodes it as hex.",
                "---",
                "",
                "# `filesha256` Function",
                "",
                "`filesha256` is a variant of [`sha256`](/terraform/language/functions/sha256)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `sha256(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/filesha512",
              "id": "hash_and_crypto_functions.filesha512",
              "title": "filesha512",
              "syntax": [
                "filesha512(path)"
              ],
              "description": "is a variant of [`sha512`](/terraform/language/functions/sha512)",
              "full": [
                "---",
                "page_title: filesha512 - Functions - Configuration Language",
                "description: |-",
                "  The filesha512 function computes the SHA512 hash of the contents of",
                "  a given file and encodes it as hex.",
                "---",
                "",
                "# `filesha512` Function",
                "",
                "`filesha512` is a variant of [`sha512`](/terraform/language/functions/sha512)",
                "that hashes the contents of a given file rather than a literal string.",
                "",
                "This is similar to `sha512(file(filename))`, but",
                "because [`file`](/terraform/language/functions/file) accepts only UTF-8 text it cannot be used to",
                "create hashes for binary files."
              ]
            },
            {
              "path": "/terraform/language/functions/md5",
              "id": "hash_and_crypto_functions.md5",
              "title": "md5",
              "syntax": [
                "md5(string)"
              ],
              "description": "computes the MD5 hash of a given string and encodes it with hexadecimal digits.",
              "full": [
                "---",
                "page_title: md5 - Functions - Configuration Language",
                "description: |-",
                "  The md5 function computes the MD5 hash of a given string and encodes it",
                "  with hexadecimal digits.",
                "---",
                "",
                "# `md5` Function",
                "",
                "`md5` computes the MD5 hash of a given string and encodes it with",
                "hexadecimal digits.",
                "",
                "The given string is first encoded as UTF-8 and then the MD5 algorithm is applied",
                "as defined in [RFC 1321](https://tools.ietf.org/html/rfc1321). The raw hash is",
                "then encoded to lowercase hexadecimal digits before returning.",
                "",
                "Before using this function for anything security-sensitive, refer to",
                "[RFC 6151](https://tools.ietf.org/html/rfc6151) for updated security",
                "considerations applying to the MD5 algorithm.",
                "",
                "## Examples",
                "",
                "```",
                "> md5(\"hello world\")",
                "5eb63bbbe01eeed093cb22bb8f5acdc3",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filemd5`](/terraform/language/functions/filemd5) calculates the same hash from",
                "  the contents of a file rather than from a string value."
              ]
            },
            {
              "path": "/terraform/language/functions/rsadecrypt",
              "id": "hash_and_crypto_functions.rsadecrypt",
              "title": "rsadecrypt",
              "syntax": [
                "rsadecrypt(ciphertext, privatekey)"
              ],
              "description": "decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext.",
              "full": [
                "---",
                "page_title: rsadecrypt - Functions - Configuration Language",
                "description: The rsadecrypt function decrypts an RSA-encrypted message.",
                "---",
                "",
                "# `rsadecrypt` Function",
                "",
                "`rsadecrypt` decrypts an RSA-encrypted ciphertext, returning the corresponding",
                "cleartext.",
                "",
                "```hcl",
                "rsadecrypt(ciphertext, privatekey)",
                "```",
                "",
                "`ciphertext` must be a base64-encoded representation of the ciphertext, using",
                "the PKCS #1 v1.5 padding scheme. Terraform uses the \"standard\" Base64 alphabet",
                "as defined in [RFC 4648 section 4](https://tools.ietf.org/html/rfc4648#section-4).",
                "",
                "`privatekey` must be a PEM-encoded RSA private key that is not itself",
                "encrypted.",
                "",
                "Terraform has no corresponding function for _encrypting_ a message. Use this",
                "function to decrypt ciphertexts returned by remote services using a keypair",
                "negotiated out-of-band.",
                "",
                "## Examples",
                "",
                "```",
                "> rsadecrypt(filebase64(\"${path.module}/ciphertext\"), file(\"privatekey.pem\"))",
                "Hello, world!",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/sha1",
              "id": "hash_and_crypto_functions.sha1",
              "title": "sha1",
              "syntax": [
                "rsadecrypt(string)"
              ],
              "description": "computes the SHA1 hash of a given string and encodes it with hexadecimal digits.",
              "full": [
                "---",
                "page_title: sha1 - Functions - Configuration Language",
                "description: |-",
                "  The sha1 function computes the SHA1 hash of a given string and encodes it",
                "  with hexadecimal digits.",
                "---",
                "",
                "# `sha1` Function",
                "",
                "`sha1` computes the SHA1 hash of a given string and encodes it with",
                "hexadecimal digits.",
                "",
                "The given string is first encoded as UTF-8 and then the SHA1 algorithm is applied",
                "as defined in [RFC 3174](https://tools.ietf.org/html/rfc3174). The raw hash is",
                "then encoded to lowercase hexadecimal digits before returning.",
                "",
                "Collision attacks have been successfully performed against this hashing",
                "function. Before using this function for anything security-sensitive, review",
                "relevant literature to understand the security implications.",
                "",
                "## Examples",
                "",
                "```",
                "> sha1(\"hello world\")",
                "2aae6c35c94fcfb415dbe95f408b9ce91ee846ed",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filesha1`](/terraform/language/functions/filesha1) calculates the same hash from",
                "  the contents of a file rather than from a string value."
              ]
            },
            {
              "path": "/terraform/language/functions/sha256",
              "id": "hash_and_crypto_functions.sha256",
              "title": "sha256",
              "syntax": [
                "sha256(string)"
              ],
              "description": "computes the SHA256 hash of a given string and encodes it with hexadecimal digits.",
              "full": [
                "---",
                "page_title: sha256 - Functions - Configuration Language",
                "description: |-",
                "  The sha256 function computes the SHA256 hash of a given string and encodes it",
                "  with hexadecimal digits.",
                "---",
                "",
                "# `sha256` Function",
                "",
                "`sha256` computes the SHA256 hash of a given string and encodes it with",
                "hexadecimal digits.",
                "",
                "The given string is first encoded as UTF-8 and then the SHA256 algorithm is applied",
                "as defined in [RFC 4634](https://tools.ietf.org/html/rfc4634). The raw hash is",
                "then encoded to lowercase hexadecimal digits before returning.",
                "",
                "## Examples",
                "",
                "```",
                "> sha256(\"hello world\")",
                "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9",
                "```",
                "",
                "## Related Functions",
                "",
                "## Related Functions",
                "",
                "* [`filesha256`](/terraform/language/functions/filesha256) calculates the same hash from",
                "  the contents of a file rather than from a string value.",
                "* [`base64sha256`](/terraform/language/functions/base64sha256) calculates the same hash but returns",
                "  the result in a more-compact Base64 encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/sha512",
              "id": "hash_and_crypto_functions.sha512",
              "title": "sha512",
              "syntax": [
                "sha512(string)"
              ],
              "description": "computes the SHA512 hash of a given string and encodes it with hexadecimal digits.",
              "full": [
                "---",
                "page_title: sha512 - Functions - Configuration Language",
                "description: |-",
                "  The sha512 function computes the SHA512 hash of a given string and encodes it",
                "  with hexadecimal digits.",
                "---",
                "",
                "# `sha512` Function",
                "",
                "`sha512` computes the SHA512 hash of a given string and encodes it with",
                "hexadecimal digits.",
                "",
                "The given string is first encoded as UTF-8 and then the SHA512 algorithm is applied",
                "as defined in [RFC 4634](https://tools.ietf.org/html/rfc4634). The raw hash is",
                "then encoded to lowercase hexadecimal digits before returning.",
                "",
                "## Examples",
                "",
                "```",
                "> sha512(\"hello world\")",
                "309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`filesha512`](/terraform/language/functions/filesha512) calculates the same hash from",
                "  the contents of a file rather than from a string value.",
                "* [`base64sha512`](/terraform/language/functions/base64sha512) calculates the same hash but returns",
                "  the result in a more-compact Base64 encoding."
              ]
            },
            {
              "path": "/terraform/language/functions/uuid",
              "id": "hash_and_crypto_functions.uuid",
              "title": "uuid",
              "syntax": [
                "uuid()"
              ],
              "description": "generates a unique identifier string.",
              "full": [
                "---",
                "page_title: uuid - Functions - Configuration Language",
                "description: The uuid function generates a unique id.",
                "---",
                "",
                "# `uuid` Function",
                "",
                "`uuid` generates a unique identifier string.",
                "",
                "The id is a generated and formatted as required by",
                "[RFC 4122 section 4.4](https://tools.ietf.org/html/rfc4122#section-4.4),",
                "producing a Version 4 UUID. The result is a UUID generated only from",
                "pseudo-random numbers.",
                "",
                "This function produces a new value each time it is called, and so using it",
                "directly in resource arguments will result in spurious diffs. We do not",
                "recommend using the `uuid` function in resource configurations, but it can",
                "be used with care in conjunction with",
                "[the `ignore_changes` lifecycle meta-argument](/terraform/language/meta-arguments/lifecycle#ignore_changes).",
                "",
                "In most cases we recommend using [the `random` provider](https://registry.terraform.io/providers/hashicorp/random/latest/docs)",
                "instead, since it allows the one-time generation of random values that are",
                "then retained in the Terraform [state](/terraform/language/state) for use by",
                "future operations. In particular,",
                "[`random_id`](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/id) can generate results with",
                "equivalent randomness to the `uuid` function.",
                "",
                "## Examples",
                "",
                "```",
                "> uuid()",
                "b5ee72a3-54dd-c4b8-551c-4bdc0204cedb",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`uuidv5`](/terraform/language/functions/uuidv5), which generates name-based UUIDs."
              ]
            },
            {
              "path": "/terraform/language/functions/uuidv5",
              "id": "hash_and_crypto_functions.uuidv5",
              "title": "uuidv5",
              "syntax": [
                "uuidv5(namespace, name)"
              ],
              "description": "generates a _name-based_ UUID, as described in also known as a \"version 5\" UUID.",
              "full": [
                "---",
                "page_title: uuidv5 - Functions - Configuration Language",
                "description: >-",
                "  The uuidv5 function generates a uuid v5 string representation of the value in",
                "  the specified namespace.",
                "---",
                "",
                "# `uuidv5` Function",
                "",
                "`uuidv5` generates a _name-based_ UUID, as described in",
                "[RFC 4122 section 4.3](https://tools.ietf.org/html/rfc4122#section-4.3),",
                "also known as a \"version 5\" UUID.",
                "",
                "```",
                "uuidv5(namespace, name)",
                "```",
                "",
                "Unlike the pseudo-random UUIDs generated by",
                "[`uuid`](/terraform/language/functions/uuid), name-based UUIDs derive from namespace and an name,",
                "producing the same UUID value every time if the namespace and name are",
                "unchanged.",
                "",
                "Name-based UUID namespaces are themselves UUIDs, but for readability this",
                "function accepts some keywords as aliases for the namespaces that were",
                "assigned by RFC 4122:",
                "",
                "| Keyword  | Namespace ID                           | Name format                                                                  |",
                "| -------- | -------------------------------------- | ---------------------------------------------------------------------------- |",
                "| `\"dns\"`  | `6ba7b810-9dad-11d1-80b4-00c04fd430c8` | A fully-qualified DNS domain name.                                           |",
                "| `\"url\"`  | `6ba7b811-9dad-11d1-80b4-00c04fd430c8` | Any valid URL as defined in [RFC 3986](https://tools.ietf.org/html/rfc3986). |",
                "| `\"oid\"`  | `6ba7b812-9dad-11d1-80b4-00c04fd430c8` | An [ISO/IEC object identifier](https://oidref.com/)                          |",
                "| `\"x500\"` | `6ba7b814-9dad-11d1-80b4-00c04fd430c8` | [X.500 Distinguished Name](https://tools.ietf.org/html/rfc1779)              |",
                "",
                "To use any other namespace not included in the above table, pass its assigned",
                "namespace ID directly in the first argument in the usual UUID string format.",
                "",
                "## Examples",
                "",
                "Use the namespace keywords where possible, to make the intent more obvious to",
                "a future reader:",
                "",
                "```",
                "> uuidv5(\"dns\", \"www.terraform.io\")",
                "a5008fae-b28c-5ba5-96cd-82b4c53552d6",
                "",
                "> uuidv5(\"url\", \"https://www.terraform.io/\")",
                "9db6f67c-dd95-5ea0-aa5b-e70e5c5f7cf5",
                "",
                "> uuidv5(\"oid\", \"1.3.6.1.4\")",
                "af9d40a5-7a36-5c07-b23a-851cd99fbfa5",
                "",
                "> uuidv5(\"x500\", \"CN=Example,C=GB\")",
                "84e09961-4aa4-57f8-95b7-03edb1073253",
                "```",
                "",
                "The namespace keywords treated as equivalent to their corresponding namespace",
                "UUIDs, and in some special cases it may be more appropriate to use the",
                "UUID form:",
                "",
                "```",
                "> uuidv5(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\", \"www.terraform.io\")",
                "a5008fae-b28c-5ba5-96cd-82b4c53552d6",
                "```",
                "",
                "If you wish to use a namespace defined outside of RFC 4122, using the namespace",
                "UUID is required because no corresponding keyword is available:",
                "",
                "```",
                "> uuidv5(\"743ac3c0-3bf7-4a5b-9e6c-59360447c757\", \"LIBS:diskfont.library\")",
                "ede1a974-df7e-5f17-84b9-76208818b2c8",
                "```",
                "",
                "When using raw UUID namespaces, consider including a comment alongside the",
                "expression that indicates which namespace this represents in a",
                "human-significant manner, such as by reference to the standard that",
                "defined it.",
                "",
                "## Related Functions",
                "",
                "* [`uuid`](/terraform/language/functions/uuid), which generates pseudorandom UUIDs."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.ip_network_functions",
          "title": "IP Network Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/cidrhost",
              "id": "ip_network_functions.cidrhost",
              "title": "cidrhost",
              "syntax": [
                "cidrhost(prefix, hostnum)"
              ],
              "description": "calculates a full host IP address for a given host number within IP network address prefix.",
              "full": [
                "---",
                "page_title: cidrhost - Functions - Configuration Language",
                "description: |-",
                "  The cidrhost function calculates a full host IP address within a given",
                "  IP network address prefix.",
                "---",
                "",
                "# `cidrhost` Function",
                "",
                "`cidrhost` calculates a full host IP address for a given host number within",
                "a given IP network address prefix.",
                "",
                "```hcl",
                "cidrhost(prefix, hostnum)",
                "```",
                "",
                "`prefix` must be given in CIDR notation, as defined in",
                "[RFC 4632 section 3.1](https://tools.ietf.org/html/rfc4632#section-3.1).",
                "",
                "`hostnum` is a whole number that can be represented as a binary integer with",
                "no more than the number of digits remaining in the address after the given",
                "prefix. For more details on how this function interprets CIDR prefixes and",
                "populates host numbers, see the worked example for",
                "[`cidrsubnet`](/terraform/language/functions/cidrsubnet).",
                "",
                "Conventionally host number zero is used to represent the address of the",
                "network itself and the host number that would fill all the host bits with",
                "binary 1 represents the network's broadcast address. These numbers should",
                "generally not be used to identify individual hosts except in unusual",
                "situations, such as point-to-point links.",
                "",
                "This function accepts both IPv6 and IPv4 prefixes, and the result always uses",
                "the same addressing scheme as the given prefix.",
                "",
                "-> **Note:** As a historical accident, this function interprets IPv4 address",
                "octets that have leading zeros as decimal numbers, which is contrary to some",
                "other systems which interpret them as octal. We have preserved this behavior",
                "for backward compatibility, but recommend against relying on this behavior.",
                "",
                "## Examples",
                "",
                "```",
                "> cidrhost(\"10.12.112.0/20\", 16)",
                "10.12.112.16",
                "> cidrhost(\"10.12.112.0/20\", 268)",
                "10.12.113.12",
                "> cidrhost(\"fd00:fd12:3456:7890:00a2::/72\", 34)",
                "fd00:fd12:3456:7890::22",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`cidrsubnet`](/terraform/language/functions/cidrsubnet) calculates a subnet address under a given",
                "  network address prefix."
              ]
            },
            {
              "path": "/terraform/language/functions/cidrnetmask",
              "id": "ip_network_functions.cidrnetmask",
              "title": "cidrnetmask",
              "syntax": [
                "cidrnetmask(prefix)"
              ],
              "description": "converts an IPv4 address prefix given in CIDR notation into notation into a subnet mask address.",
              "full": [
                "---",
                "page_title: cidrnetmask - Functions - Configuration Language",
                "description: |-",
                "  The cidrnetmask function converts an IPv4 address prefix given in CIDR",
                "  notation into a subnet mask address.",
                "---",
                "",
                "# `cidrnetmask` Function",
                "",
                "`cidrnetmask` converts an IPv4 address prefix given in CIDR notation into",
                "a subnet mask address.",
                "",
                "```hcl",
                "cidrnetmask(prefix)",
                "```",
                "",
                "`prefix` must be given in IPv4 CIDR notation, as defined in",
                "[RFC 4632 section 3.1](https://tools.ietf.org/html/rfc4632#section-3.1).",
                "",
                "The result is a subnet address formatted in the conventional dotted-decimal",
                "IPv4 address syntax, as expected by some software.",
                "",
                "CIDR notation is the only valid notation for IPv6 addresses, so `cidrnetmask`",
                "produces an error if given an IPv6 address.",
                "",
                "-> **Note:** As a historical accident, this function interprets IPv4 address",
                "octets that have leading zeros as decimal numbers, which is contrary to some",
                "other systems which interpret them as octal. We have preserved this behavior",
                "for backward compatibility, but recommend against relying on this behavior.",
                "",
                "## Examples",
                "",
                "```",
                "> cidrnetmask(\"172.16.0.0/12\")",
                "255.240.0.0",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/cidrsubnet",
              "id": "ip_network_functions.cidrsubnet",
              "title": "cidrsubnet",
              "syntax": [
                "cidrsubnet(prefix, newbits, netnum)"
              ],
              "description": "calculates a subnet address within given IP network address prefix.",
              "full": [
                "---",
                "page_title: cidrsubnet - Functions - Configuration Language",
                "description: |-",
                "  The cidrsubnet function calculates a subnet address within a given IP network",
                "  address prefix.",
                "---",
                "",
                "# `cidrsubnet` Function",
                "",
                "`cidrsubnet` calculates a subnet address within given IP network address prefix.",
                "",
                "```hcl",
                "cidrsubnet(prefix, newbits, netnum)",
                "```",
                "",
                "`prefix` must be given in CIDR notation, as defined in",
                "[RFC 4632 section 3.1](https://tools.ietf.org/html/rfc4632#section-3.1).",
                "",
                "`newbits` is the number of additional bits with which to extend the prefix.",
                "For example, if given a prefix ending in `/16` and a `newbits` value of",
                "`4`, the resulting subnet address will have length `/20`.",
                "",
                "`netnum` is a whole number that can be represented as a binary integer with",
                "no more than `newbits` binary digits, which will be used to populate the",
                "additional bits added to the prefix.",
                "",
                "This function accepts both IPv6 and IPv4 prefixes, and the result always uses",
                "the same addressing scheme as the given prefix.",
                "",
                "Unlike the related function [`cidrsubnets`](/terraform/language/functions/cidrsubnets), `cidrsubnet`",
                "allows you to give a specific network number to use. `cidrsubnets` can allocate",
                "multiple network addresses at once, but numbers them automatically starting",
                "with zero.",
                "",
                "-> **Note:** As a historical accident, this function interprets IPv4 address",
                "octets that have leading zeros as decimal numbers, which is contrary to some",
                "other systems which interpret them as octal. We have preserved this behavior",
                "for backward compatibility, but recommend against relying on this behavior.",
                "",
                "## Examples",
                "",
                "```",
                "> cidrsubnet(\"172.16.0.0/12\", 4, 2)",
                "172.18.0.0/16",
                "> cidrsubnet(\"10.1.2.0/24\", 4, 15)",
                "10.1.2.240/28",
                "> cidrsubnet(\"fd00:fd12:3456:7890::/56\", 16, 162)",
                "fd00:fd12:3456:7800:a200::/72",
                "```",
                "",
                "## Netmasks and Subnets",
                "",
                "Using `cidrsubnet` requires familiarity with some network addressing concepts.",
                "",
                "The most important idea is that an IP address (whether IPv4 or IPv6) is",
                "fundamentally constructed from binary digits, even though we conventionally",
                "represent it as either four decimal octets (for IPv4) or a sequence of 16-bit",
                "hexadecimal numbers (for IPv6).",
                "",
                "Taking our example above of `cidrsubnet(\"10.1.2.0/24\", 4, 15)`, the function",
                "will first convert the given IP address string into an equivalent binary",
                "representation:",
                "",
                "```",
                "      10 .        1 .        2 .        0",
                "00001010   00000001   00000010 | 00000000",
                "         network               |   host",
                "```",
                "",
                "The `/24` at the end of the prefix string specifies that the first 24",
                "bits -- or, the first three octets -- of the address identify the network",
                "while the remaining bits (32 - 24 = 8 bits in this case) identify hosts",
                "within the network.",
                "",
                "The CLI tool [`ipcalc`](https://gitlab.com/ipcalc/ipcalc) is useful for",
                "visualizing CIDR prefixes as binary numbers. We can confirm the conversion",
                "above by providing the same prefix string to `ipcalc`:",
                "",
                "```",
                "$ ipcalc 10.1.2.0/24",
                "Address:   10.1.2.0             00001010.00000001.00000010. 00000000",
                "Netmask:   255.255.255.0 = 24   11111111.11111111.11111111. 00000000",
                "Wildcard:  0.0.0.255            00000000.00000000.00000000. 11111111",
                "=>",
                "Network:   10.1.2.0/24          00001010.00000001.00000010. 00000000",
                "HostMin:   10.1.2.1             00001010.00000001.00000010. 00000001",
                "HostMax:   10.1.2.254           00001010.00000001.00000010. 11111110",
                "Broadcast: 10.1.2.255           00001010.00000001.00000010. 11111111",
                "Hosts/Net: 254                   Class A, Private Internet",
                "```",
                "",
                "This gives us some additional information but also confirms (using a slightly",
                "different notation) the conversion from decimal to binary and shows the range",
                "of possible host addresses in this network.",
                "",
                "While [`cidrhost`](/terraform/language/functions/cidrhost) allows calculating single host IP addresses,",
                "`cidrsubnet` on the other hand creates a new network prefix _within_ the given",
                "network prefix. In other words, it creates a subnet.",
                "",
                "When we call `cidrsubnet` we also pass two additional arguments: `newbits` and",
                "`netnum`. `newbits` decides how much longer the resulting prefix will be in",
                "bits; in our example here we specified `4`, which means that the resulting",
                "subnet will have a prefix length of 24 + 4 = 28 bits. We can imagine these",
                "bits breaking down as follows:",
                "",
                "```",
                "      10 .        1 .        2 .    ?        0",
                "00001010   00000001   00000010 |   XXXX | 0000",
                "         parent network        | netnum | host",
                "```",
                "",
                "Four of the eight bits that were originally the \"host number\" are now being",
                "repurposed as the subnet number. The network prefix no longer falls on an",
                "exact octet boundary, so in effect we are now splitting the last decimal number",
                "in the IP address into two parts, using half of it to represent the subnet",
                "number and the other half to represent the host number.",
                "",
                "The `netnum` argument then decides what number value to encode into those",
                "four new subnet bits. In our current example we passed `15`, which is",
                "represented in binary as `1111`, allowing us to fill in the `XXXX` segment",
                "in the above:",
                "",
                "```",
                "      10 .        1 .        2 .    15       0",
                "00001010   00000001   00000010 |   1111 | 0000",
                "         parent network        | netnum | host",
                "```",
                "",
                "To convert this back into normal decimal notation we need to recombine the",
                "two portions of the final octet. Converting `11110000` from binary to decimal",
                "gives 240, which can then be combined with our new prefix length of 28 to",
                "produce the result `10.1.2.240/28`. Again we can pass this prefix string to",
                "`ipcalc` to visualize it:",
                "",
                "```",
                "$ ipcalc 10.1.2.240/28",
                "Address:   10.1.2.240           00001010.00000001.00000010.1111 0000",
                "Netmask:   255.255.255.240 = 28 11111111.11111111.11111111.1111 0000",
                "Wildcard:  0.0.0.15             00000000.00000000.00000000.0000 1111",
                "=>",
                "Network:   10.1.2.240/28        00001010.00000001.00000010.1111 0000",
                "HostMin:   10.1.2.241           00001010.00000001.00000010.1111 0001",
                "HostMax:   10.1.2.254           00001010.00000001.00000010.1111 1110",
                "Broadcast: 10.1.2.255           00001010.00000001.00000010.1111 1111",
                "Hosts/Net: 14                    Class A, Private Internet",
                "```",
                "",
                "The new subnet has four bits available for host numbering, which means",
                "that there are 14 host addresses available for assignment once we subtract",
                "the network's own address and the broadcast address. You can thus use",
                "[`cidrhost`](/terraform/language/functions/cidrhost) function to calculate those host addresses by",
                "providing it a value between 1 and 14:",
                "",
                "```",
                "> cidrhost(\"10.1.2.240/28\", 1)",
                "10.1.2.241",
                "> cidrhost(\"10.1.2.240/28\", 14)",
                "10.1.2.254",
                "```",
                "",
                "For more information on CIDR notation and subnetting, see",
                "[Classless Inter-domain Routing](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing).",
                "",
                "## Related Functions",
                "",
                "* [`cidrhost`](/terraform/language/functions/cidrhost) calculates the IP address for a single host",
                "  within a given network address prefix.",
                "* [`cidrnetmask`](/terraform/language/functions/cidrnetmask) converts an IPv4 network prefix in CIDR",
                "  notation into netmask notation.",
                "* [`cidrsubnets`](/terraform/language/functions/cidrsubnets) can allocate multiple consecutive",
                "  addresses under a prefix at once, numbering them automatically."
              ]
            },
            {
              "path": "/terraform/language/functions/cidrsubnets",
              "id": "ip_network_functions.cidrsubnets",
              "title": "cidrsubnets",
              "syntax": [
                "cidrsubnets(prefix, ...newbits)"
              ],
              "description": "calculates a sequence of consecutive IP address ranges within a particular CIDR prefix.",
              "full": [
                "---",
                "page_title: cidrsubnets - Functions - Configuration Language",
                "description: |-",
                "  The cidrsubnets function calculates a sequence of consecutive IP address",
                "  ranges within a particular CIDR prefix.",
                "---",
                "",
                "# `cidrsubnets` Function",
                "",
                "`cidrsubnets` calculates a sequence of consecutive IP address ranges within",
                "a particular CIDR prefix.",
                "",
                "```hcl",
                "cidrsubnets(prefix, newbits...)",
                "```",
                "",
                "`prefix` must be given in CIDR notation, as defined in",
                "[RFC 4632 section 3.1](https://tools.ietf.org/html/rfc4632#section-3.1).",
                "",
                "The remaining arguments, indicated as `newbits` above, each specify the number",
                "of additional network prefix bits for one returned address range. The return",
                "value is therefore a list with one element per `newbits` argument, each",
                "a string containing an address range in CIDR notation.",
                "",
                "For more information on IP addressing concepts, see the documentation for the",
                "related function [`cidrsubnet`](/terraform/language/functions/cidrsubnet). `cidrsubnet` calculates",
                "a single subnet address within a prefix while allowing you to specify its",
                "subnet number, while `cidrsubnets` can calculate many at once, potentially of",
                "different sizes, and assigns subnet numbers automatically.",
                "",
                "When using this function to partition an address space as part of a network",
                "address plan, you must not change any of the existing arguments once network",
                "addresses have been assigned to real infrastructure, or else later address",
                "assignments will be invalidated. However, you _can_ append new arguments to",
                "existing calls safely, as long as there is sufficient address space available.",
                "",
                "This function accepts both IPv6 and IPv4 prefixes, and the result always uses",
                "the same addressing scheme as the given prefix.",
                "",
                "-> **Note:** As a historical accident, this function interprets IPv4 address",
                "octets that have leading zeros as decimal numbers, which is contrary to some",
                "other systems which interpret them as octal. We have preserved this behavior",
                "for backward compatibility, but recommend against relying on this behavior.",
                "",
                "-> **Note:** [The Terraform module `hashicorp/subnets/cidr`](https://registry.terraform.io/modules/hashicorp/subnets/cidr)",
                "wraps `cidrsubnets` to provide additional functionality for assigning symbolic",
                "names to your networks and skipping prefixes for obsolete allocations. Its",
                "documentation includes usage examples for several popular cloud virtual network",
                "platforms.",
                "",
                "## Examples",
                "",
                "```",
                "> cidrsubnets(\"10.1.0.0/16\", 4, 4, 8, 4)",
                "[",
                "  \"10.1.0.0/20\",",
                "  \"10.1.16.0/20\",",
                "  \"10.1.32.0/24\",",
                "  \"10.1.48.0/20\",",
                "]",
                "",
                "> cidrsubnets(\"fd00:fd12:3456:7890::/56\", 16, 16, 16, 32)",
                "[",
                "  \"fd00:fd12:3456:7800::/72\",",
                "  \"fd00:fd12:3456:7800:100::/72\",",
                "  \"fd00:fd12:3456:7800:200::/72\",",
                "  \"fd00:fd12:3456:7800:300::/88\",",
                "]",
                "```",
                "",
                "You can use nested `cidrsubnets` calls with",
                "[`for` expressions](/terraform/language/expressions/for)",
                "to concisely allocate groups of network address blocks:",
                "",
                "```",
                "> [for cidr_block in cidrsubnets(\"10.0.0.0/8\", 8, 8, 8, 8) : cidrsubnets(cidr_block, 4, 4)]",
                "[",
                "  [",
                "    \"10.0.0.0/20\",",
                "    \"10.0.16.0/20\",",
                "  ],",
                "  [",
                "    \"10.1.0.0/20\",",
                "    \"10.1.16.0/20\",",
                "  ],",
                "  [",
                "    \"10.2.0.0/20\",",
                "    \"10.2.16.0/20\",",
                "  ],",
                "  [",
                "    \"10.3.0.0/20\",",
                "    \"10.3.16.0/20\",",
                "  ],",
                "]",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`cidrhost`](/terraform/language/functions/cidrhost) calculates the IP address for a single host",
                "  within a given network address prefix.",
                "* [`cidrnetmask`](/terraform/language/functions/cidrnetmask) converts an IPv4 network prefix in CIDR",
                "  notation into netmask notation.",
                "* [`cidrsubnet`](/terraform/language/functions/cidrsubnet) calculates a single subnet address, allowing",
                "  you to specify its network number."
              ]
            }
          ]
        },
        {
          "path": "/terraform/language/functions",
          "id": "functions.type_conversion_functions",
          "title": "Type Conversion Functions",
          "description": null,
          "data": [
            {
              "path": "/terraform/language/functions/can",
              "id": "type_conversion_functions.can",
              "title": "can",
              "syntax": [
                "can(function(...args))"
              ],
              "description": "evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors.",
              "full": [
                "---",
                "page_title: can - Functions - Configuration Language",
                "description: |-",
                "  The can function tries to evaluate an expression given as an argument and",
                "  indicates whether the evaluation succeeded.",
                "---",
                "",
                "# `can` Function",
                "",
                "`can` evaluates the given expression and returns a boolean value indicating",
                "whether the expression produced a result without any errors.",
                "",
                "This is a special function that is able to catch errors produced when evaluating",
                "its argument. For most situations where you could use `can` it's better to use",
                "[`try`](/terraform/language/functions/try) instead, because it allows for more concise definition of",
                "fallback values for failing expressions.",
                "",
                "The primary purpose of `can` is to turn an error condition into a boolean",
                "validation result when writing",
                "[custom variable validation rules](/terraform/language/values/variables#custom-validation-rules).",
                "For example:",
                "",
                "```",
                "variable \"timestamp\" {",
                "  type        = string",
                "",
                "  validation {",
                "    # formatdate fails if the second argument is not a valid timestamp",
                "    condition     = can(formatdate(\"\", var.timestamp))",
                "    error_message = \"The timestamp argument requires a valid RFC 3339 timestamp.\"",
                "  }",
                "}",
                "```",
                "",
                "The `can` function can only catch and handle _dynamic_ errors resulting from",
                "access to data that isn't known until runtime. It will not catch errors",
                "relating to expressions that can be proven to be invalid for any input, such",
                "as a malformed resource reference.",
                "",
                "~> **Warning:** The `can` function is intended only for simple tests in",
                "variable validation rules. Although it can technically accept any sort of",
                "expression and be used elsewhere in the configuration, we recommend against",
                "using it in other contexts. For error handling elsewhere in the configuration,",
                "prefer to use [`try`](/terraform/language/functions/try).",
                "",
                "## Examples",
                "",
                "```",
                "> local.foo",
                "{",
                "  \"bar\" = \"baz\"",
                "}",
                "> can(local.foo.bar)",
                "true",
                "> can(local.foo.boop)",
                "false",
                "```",
                "",
                "The `can` function will _not_ catch errors relating to constructs that are",
                "provably invalid even before dynamic expression evaluation, such as a malformed",
                "reference or a reference to a top-level object that has not been declared:",
                "",
                "```",
                "> can(local.nonexist)",
                "",
                "Error: Reference to undeclared local value",
                "",
                "A local value with the name \"nonexist\" has not been declared.",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`try`](/terraform/language/functions/try), which tries evaluating a sequence of expressions and",
                "  returns the result of the first one that succeeds."
              ]
            },
            {
              "path": "/terraform/language/functions/nonsensitive",
              "id": "type_conversion_functions.nonsensitive",
              "title": "nonsensitive",
              "syntax": [
                "nonsensitive(data)"
              ],
              "description": "takes a sensitive value and returns a copy of that value with the sensitive marking removed.",
              "full": [
                "---",
                "page_title: nonsensitive - Functions - Configuration Language",
                "description: >-",
                "  The nonsensitive function removes the sensitive marking from a value that",
                "  Terraform considers to be sensitive.",
                "---",
                "",
                "# `nonsensitive` Function",
                "",
                "-> **Note:** This function is only available in Terraform v0.15 and later.",
                "",
                "`nonsensitive` takes a sensitive value and returns a copy of that value with",
                "the sensitive marking removed, thereby exposing the sensitive value.",
                "",
                "~> **Warning:** Using this function indiscriminately will cause values that",
                "Terraform would normally have considered as sensitive to be treated as normal",
                "values and shown clearly in Terraform's output. Use this function only when",
                "you've derived a new value from a sensitive value in a way that eliminates the",
                "sensitive portions of the value.",
                "",
                "Normally Terraform tracks when you use expressions to derive a new value from",
                "a value that is marked as sensitive, so that the result can also be marked",
                "as sensitive.",
                "",
                "However, you may wish to write expressions that derive non-sensitive results",
                "from sensitive values. For example, if you know based on details of your",
                "particular system and its threat model that a SHA256 hash of a particular",
                "sensitive value is safe to include clearly in Terraform output, you could use",
                "the `nonsensitive` function to indicate that, overriding Terraform's normal",
                "conservative behavior:",
                "",
                "```hcl",
                "output \"sensitive_example_hash\" {",
                "  value = nonsensitive(sha256(var.sensitive_example))",
                "}",
                "```",
                "",
                "Another example might be if the original value is only partially sensitive and",
                "you've written expressions to separate the sensitive and non-sensitive parts:",
                "",
                "```hcl",
                "variable \"mixed_content_json\" {",
                "  description = \"A JSON string containing a mixture of sensitive and non-sensitive values.\"",
                "  type        = string",
                "  sensitive   = true",
                "}",
                "",
                "locals {",
                "  # mixed_content is derived from var.mixed_content_json, so it",
                "  # is also considered to be sensitive.",
                "  mixed_content = jsondecode(var.mixed_content_json)",
                "",
                "  # password_from_json is derived from mixed_content, so it's",
                "  # also considered to be sensitive.",
                "  password_from_json = local.mixed_content[\"password\"]",
                "",
                "  # username_from_json would normally be considered to be",
                "  # sensitive too, but system-specific knowledge tells us",
                "  # that the username is a non-sensitive fragment of the",
                "  # original document, and so we can override Terraform's",
                "  # determination.",
                "  username_from_json = nonsensitive(local.mixed_content[\"username\"])",
                "}",
                "```",
                "",
                "When you use this function, it's your responsibility to ensure that the",
                "expression passed as its argument will remove all sensitive content from",
                "the sensitive value it depends on. By passing a value to `nonsensitive` you are",
                "declaring to Terraform that you have done all that is necessary to ensure that",
                "the resulting value has no sensitive content, even though it was derived",
                "from sensitive content. If a sensitive value appears in Terraform's output",
                "due to an inappropriate call to `nonsensitive` in your module, that's a bug in",
                "your module and not a bug in Terraform itself.",
                "**Use this function sparingly and only with due care.**",
                "",
                "`nonsensitive` will return an error if you pass a value that isn't marked",
                "as sensitive, because such a call would be redundant and potentially confusing",
                "or misleading to a future maintainer of your module. Use `nonsensitive` only",
                "after careful consideration and with definite intent.",
                "",
                "Consider including a comment adjacent to your call to explain to future",
                "maintainers what makes the usage safe and thus what invariants they must take",
                "care to preserve under future modifications.",
                "",
                "## Examples",
                "",
                "The following examples are from `terraform console` when running in the",
                "context of the example above with `variable \"mixed_content_json\"` and",
                "the local value `mixed_content`, with a valid JSON string assigned to",
                "`var.mixed_content_json`.",
                "",
                "```",
                "> var.mixed_content_json",
                "(sensitive value)",
                "> local.mixed_content",
                "(sensitive value)",
                "> local.mixed_content[\"password\"]",
                "(sensitive value)",
                "> nonsensitive(local.mixed_content[\"username\"])",
                "\"zqb\"",
                "> nonsensitive(\"clear\")",
                "",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"value\" parameter: the given value is not sensitive, so this",
                "call is redundant.",
                "```",
                "",
                "Note though that it's always your responsibility to use `nonsensitive` only",
                "when it's safe to do so. If you use `nonsensitive` with content that",
                "_ought to be_ considered sensitive then that content will be disclosed:",
                "",
                "```",
                "> nonsensitive(var.mixed_content_json)",
                "<<EOT",
                "{",
                "  \"username\": \"zqb\",",
                "  \"password\": \"p4ssw0rd\"",
                "}",
                "EOT",
                "> nonsensitive(local.mixed_content)",
                "{",
                "  \"password\" = \"p4ssw0rd\"",
                "  \"username\" = \"zqb\"",
                "}",
                "> nonsensitive(local.mixed_content[\"password\"])",
                "\"p4ssw0rd\"",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/sensitive",
              "id": "type_conversion_functions.sensitive",
              "title": "sensitive",
              "syntax": [
                "sensitive(data)"
              ],
              "description": "takes any value and returns a copy of it marked so that Terraform will treat it as sensitive.",
              "full": [
                "---",
                "page_title: sensitive - Functions - Configuration Language",
                "description: The sensitive function marks a value as being sensitive.",
                "---",
                "",
                "# `sensitive` Function",
                "",
                "-> **Note:** This function is only available in Terraform v0.15 and later.",
                "",
                "`sensitive` takes any value and returns a copy of it marked so that Terraform",
                "will treat it as sensitive, with the same meaning and behavior as for",
                "[sensitive input variables](/terraform/language/values/variables#suppressing-values-in-cli-output).",
                "",
                "Wherever possible we recommend marking your input variable and/or output value",
                "declarations as sensitive directly, instead of using this function, because in",
                "that case you can be sure that there is no way to refer to those values without",
                "Terraform automatically considering them as sensitive.",
                "",
                "The `sensitive` function might be useful in some less-common situations where a",
                "sensitive value arises from a definition _within_ your module, such as if you've",
                "loaded sensitive data from a file on disk as part of your configuration:",
                "",
                "```",
                "locals {",
                "  sensitive_content = sensitive(file(\"${path.module}/sensitive.txt\"))",
                "}",
                "```",
                "",
                "However, we generally don't recommend writing sensitive values directly within",
                "your module any of the files you distribute statically as part of that module,",
                "because they may be exposed in other ways outside of Terraform's control.",
                "",
                "## Examples",
                "",
                "```",
                "> sensitive(1)",
                "(sensitive value)",
                "> sensitive(\"hello\")",
                "(sensitive value)",
                "> sensitive([])",
                "(sensitive value)",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/tobool",
              "id": "type_conversion_functions.tobool",
              "title": "tobool",
              "syntax": [
                "tobool(value)"
              ],
              "description": "converts its argument to a boolean value.",
              "full": [
                "---",
                "page_title: tobool - Functions - Configuration Language",
                "description: The tobool function converts a value to boolean.",
                "---",
                "",
                "# `tobool` Function",
                "",
                "`tobool` converts its argument to a boolean value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "Only boolean values, `null`, and the exact strings `\"true\"` and `\"false\"` can be",
                "converted to boolean. All other values will produce an error.",
                "",
                "## Examples",
                "",
                "```",
                "> tobool(true)",
                "true",
                "> tobool(\"true\")",
                "true",
                "> tobool(null)",
                "null",
                "> tobool(\"no\")",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"v\" parameter: cannot convert \"no\" to bool: only the strings",
                "\"true\" or \"false\" are allowed.",
                "",
                "> tobool(1)",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"v\" parameter: cannot convert number to bool.",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/tolist",
              "id": "type_conversion_functions.tolist",
              "title": "tolist",
              "syntax": [
                "tolist(list|set)"
              ],
              "description": "converts its argument to a list value.",
              "full": [
                "---",
                "page_title: tolist - Functions - Configuration Language",
                "description: The tolist function converts a value to a list.",
                "---",
                "",
                "# `tolist` Function",
                "",
                "`tolist` converts its argument to a list value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "Pass a _set_ value to `tolist` to convert it to a list. Since set elements are",
                "not ordered, the resulting list will have an undefined order that will be",
                "consistent within a particular run of Terraform.",
                "",
                "## Examples",
                "",
                "```",
                "> tolist([\"a\", \"b\", \"c\"])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```",
                "",
                "Since Terraform's concept of a list requires all of the elements to be of the",
                "same type, mixed-typed elements will be converted to the most general type:",
                "",
                "```",
                "> tolist([\"a\", \"b\", 3])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "  \"3\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/tomap",
              "id": "type_conversion_functions.tomap",
              "title": "tomap",
              "syntax": [
                "tomap(object)"
              ],
              "description": "converts its argument to a map value.",
              "full": [
                "---",
                "page_title: tomap - Functions - Configuration Language",
                "description: The tomap function converts a value to a map.",
                "---",
                "",
                "# `tomap` Function",
                "",
                "`tomap` converts its argument to a map value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "## Examples",
                "",
                "```",
                "> tomap({\"a\" = 1, \"b\" = 2})",
                "{",
                "  \"a\" = 1",
                "  \"b\" = 2",
                "}",
                "```",
                "",
                "Since Terraform's concept of a map requires all of the elements to be of the",
                "same type, mixed-typed elements will be converted to the most general type:",
                "",
                "```",
                "> tomap({\"a\" = \"foo\", \"b\" = true})",
                "{",
                "  \"a\" = \"foo\"",
                "  \"b\" = \"true\"",
                "}",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/tonumber",
              "id": "type_conversion_functions.tonumber",
              "title": "tonumber",
              "syntax": [
                "tonumber(value)"
              ],
              "description": "converts its argument to a number value.",
              "full": [
                "---",
                "page_title: tonumber - Functions - Configuration Language",
                "description: The tonumber function converts a value to a number.",
                "---",
                "",
                "# `tonumber` Function",
                "",
                "`tonumber` converts its argument to a number value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "Only numbers, `null`, and strings containing decimal representations of numbers can be",
                "converted to number. All other values will produce an error.",
                "",
                "## Examples",
                "",
                "```",
                "> tonumber(1)",
                "1",
                "> tonumber(\"1\")",
                "1",
                "> tonumber(null)",
                "null",
                "> tonumber(\"no\")",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"v\" parameter: cannot convert \"no\" to number: string must be",
                "a decimal representation of a number.",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/toset",
              "id": "type_conversion_functions.toset",
              "title": "toset",
              "syntax": [
                "toset(list|set)"
              ],
              "description": "converts its argument to a set value.",
              "full": [
                "---",
                "page_title: toset - Functions - Configuration Language",
                "description: The toset function converts a value to a set.",
                "---",
                "",
                "# `toset` Function",
                "",
                "`toset` converts its argument to a set value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "Pass a _list_ value to `toset` to convert it to a set, which will remove any",
                "duplicate elements and discard the ordering of the elements.",
                "",
                "## Examples",
                "",
                "```",
                "> toset([\"a\", \"b\", \"c\"])",
                "[",
                "  \"a\",",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```",
                "",
                "Since Terraform's concept of a set requires all of the elements to be of the",
                "same type, mixed-typed elements will be converted to the most general type:",
                "",
                "```",
                "> toset([\"a\", \"b\", 3])",
                "[",
                "  \"3\",",
                "  \"a\",",
                "  \"b\",",
                "]",
                "```",
                "",
                "Set collections are unordered and cannot contain duplicate values, so the",
                "ordering of the argument elements is lost and any duplicate values are",
                "coalesced:",
                "",
                "```",
                "> toset([\"c\", \"b\", \"b\"])",
                "[",
                "  \"b\",",
                "  \"c\",",
                "]",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/tostring",
              "id": "type_conversion_functions.tostring",
              "title": "tostring",
              "syntax": [
                "tostring(value)"
              ],
              "description": "converts its argument to a string value.",
              "full": [
                "---",
                "page_title: tostring - Functions - Configuration Language",
                "description: The tostring function converts a value to a string.",
                "---",
                "",
                "# `tostring` Function",
                "",
                "`tostring` converts its argument to a string value.",
                "",
                "Explicit type conversions are rarely necessary in Terraform because it will",
                "convert types automatically where required. Use the explicit type conversion",
                "functions only to normalize types returned in module outputs.",
                "",
                "Only the primitive types (string, number, and bool) and `null` can be converted to string.",
                "All other values will produce an error.",
                "",
                "## Examples",
                "",
                "```",
                "> tostring(\"hello\")",
                "hello",
                "> tostring(1)",
                "1",
                "> tostring(true)",
                "true",
                "> tostring(null)",
                "null",
                "> tostring([])",
                "Error: Invalid function argument",
                "",
                "Invalid value for \"v\" parameter: cannot convert tuple to string.",
                "```"
              ]
            },
            {
              "path": "/terraform/language/functions/try",
              "id": "type_conversion_functions.try",
              "title": "try",
              "syntax": [
                "try(expression, fallback)"
              ],
              "description": "evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors.",
              "full": [
                "---",
                "page_title: try - Functions - Configuration Language",
                "description: |-",
                "  The try function tries to evaluate a sequence of expressions given as",
                "  arguments and returns the result of the first one that does not produce",
                "  any errors.",
                "---",
                "",
                "# `try` Function",
                "",
                "`try` evaluates all of its argument expressions in turn and returns the result",
                "of the first one that does not produce any errors.",
                "",
                "This is a special function that is able to catch errors produced when evaluating",
                "its arguments, which is particularly useful when working with complex data",
                "structures whose shape is not well-known at implementation time.",
                "",
                "For example, if some data is retrieved from an external system in JSON or YAML",
                "format and then decoded, the result may have attributes that are not guaranteed",
                "to be set. We can use `try` to produce a normalized data structure which has",
                "a predictable type that can therefore be used more conveniently elsewhere in",
                "the configuration:",
                "",
                "```hcl",
                "locals {",
                "  raw_value = yamldecode(file(\"${path.module}/example.yaml\"))",
                "  normalized_value = {",
                "    name   = tostring(try(local.raw_value.name, null))",
                "    groups = try(local.raw_value.groups, [])",
                "  }",
                "}",
                "```",
                "",
                "With the above local value expressions, configuration elsewhere in the module",
                "can refer to `local.normalized_value` attributes without the need to repeatedly",
                "check for and handle absent attributes that would otherwise produce errors.",
                "",
                "We can also use `try` to deal with situations where a value might be provided",
                "in two different forms, allowing us to normalize to the most general form:",
                "",
                "```hcl",
                "variable \"example\" {",
                "  type = any",
                "}",
                "",
                "locals {",
                "  example = try(",
                "    [tostring(var.example)],",
                "    tolist(var.example),",
                "  )",
                "}",
                "```",
                "",
                "The above permits `var.example` to be either a list or a single string. If it's",
                "a single string then it'll be normalized to a single-element list containing",
                "that string, again allowing expressions elsewhere in the configuration to just",
                "assume that `local.example` is always a list.",
                "",
                "This second example contains two expressions that can both potentially fail.",
                "For example, if `var.example` were set to `{}` then it could be converted to",
                "neither a string nor a list. If `try` exhausts all of the given expressions",
                "without any succeeding, it will return an error describing all of the problems",
                "it encountered.",
                "",
                "We strongly suggest using `try` only in special local values whose expressions",
                "perform normalization, so that the error handling is confined to a single",
                "location in the module and the rest of the module can just use straightforward",
                "references to the normalized structure and thus be more readable for future",
                "maintainers.",
                "",
                "The `try` function can only catch and handle _dynamic_ errors resulting from",
                "access to data that isn't known until runtime. It will not catch errors",
                "relating to expressions that can be proven to be invalid for any input, such",
                "as a malformed resource reference.",
                "",
                "~> **Warning:** The `try` function is intended only for concise testing of the",
                "presence of and types of object attributes. Although it can technically accept",
                "any sort of expression, we recommend using it only with simple attribute",
                "references and type conversion functions as shown in the examples above.",
                "Overuse of `try` to suppress errors will lead to a configuration that is hard",
                "to understand and maintain.",
                "",
                "## Examples",
                "",
                "```",
                "> local.foo",
                "{",
                "  \"bar\" = \"baz\"",
                "}",
                "> try(local.foo.bar, \"fallback\")",
                "baz",
                "> try(local.foo.boop, \"fallback\")",
                "fallback",
                "```",
                "",
                "The `try` function will _not_ catch errors relating to constructs that are",
                "provably invalid even before dynamic expression evaluation, such as a malformed",
                "reference or a reference to a top-level object that has not been declared:",
                "",
                "```",
                "> try(local.nonexist, \"fallback\")",
                "",
                "Error: Reference to undeclared local value",
                "",
                "A local value with the name \"nonexist\" has not been declared.",
                "```",
                "",
                "## Related Functions",
                "",
                "* [`can`](/terraform/language/functions/can), which tries evaluating an expression and returns a",
                "  boolean value indicating whether it succeeded."
              ]
            },
            {
              "path": "/terraform/language/functions/type",
              "id": "type_conversion_functions.type",
              "title": "type",
              "syntax": [
                "type(value)"
              ],
              "description": "returns the type of a given value.",
              "full": [
                "---",
                "page_title: type - Functions - Configuration Language",
                "description: 'The type function returns the type of a given value. '",
                "---",
                "",
                "# `type` Function",
                "",
                "-> **Note:** This function is available only in Terraform 1.0 and later.",
                "",
                "`type` returns the type of a given value.",
                "",
                "Sometimes a Terraform configuration can result in confusing errors regarding",
                "inconsistent types. This function displays terraform's evaluation of a given",
                "value's type, which is useful in understanding this error message.",
                "",
                "This is a special function which is only available in the `terraform console`",
                "command. It can only be used to examine the type of a given value, and should",
                "not be used in more complex expressions.",
                "",
                "## Examples",
                "",
                "Here we have a conditional `output` which prints either the value of `var.list` or a local named `default_list`:",
                "",
                "```hcl",
                "variable \"list\" {",
                "  default = []",
                "}",
                "",
                "locals {",
                "  default_list = [",
                "    {",
                "      foo = \"bar\"",
                "      map = { bleep = \"bloop\" }",
                "    },",
                "    {",
                "      beep = \"boop\"",
                "    },",
                "  ]",
                "}",
                "",
                "output \"list\" {",
                "  value = var.list != [] ? var.list : local.default_list",
                "}",
                "```",
                "",
                "Applying this configuration results in the following error:",
                "",
                "```",
                "Error: Inconsistent conditional result types",
                "",
                "  on main.tf line 18, in output \"list\":",
                "  18:   value = var.list != [] ? var.list : local.default_list",
                "    |----------------",
                "    | local.default_list is tuple with 2 elements",
                "    | var.list is empty tuple",
                "",
                "The true and false result expressions must have consistent types. The given",
                "expressions are tuple and tuple, respectively.",
                "```",
                "",
                "While this error message does include some type information, it can be helpful",
                "to inspect the exact type that Terraform has determined for each given input.",
                "Examining both `var.list` and `local.default_list` using the `type` function",
                "provides more context for the error message:",
                "",
                "```",
                "> type(var.list)",
                "tuple",
                "> type(local.default_list)",
                "tuple([",
                "    object({",
                "        foo: string,",
                "        map: object({",
                "            bleep: string,",
                "        }),",
                "    }),",
                "    object({",
                "        beep: string,",
                "    }),",
                "])",
                "```"
              ]
            }
          ]
        }
      ]
    },
    {
      "baseUrl": "https://developer.hashicorp.com",
      "path": "/terraform/language/settings/backends/configuration",
      "id": "documentation.backends",
      "title": "Backends",
      "description": "available terraform state backends",
      "data": [
        {
          "path": "/terraform/language/settings/backends/local",
          "id": "backends.local",
          "title": "local",
          "description": "the local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/remote",
          "id": "backends.remote",
          "title": "remote",
          "description": "the remote backend is unique among all other Terraform backends because it can both store state snapshots and execute operations for Terraform Cloud's CLI-driven run workflow. It used to be called an \"enhanced\" backend.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/azurerm",
          "id": "backends.azurerm",
          "title": "azurerm",
          "description": "stores the state as a Blob with the given Key within the Blob Container within the Blob Storage Account.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/consul",
          "id": "backends.consul",
          "title": "consul",
          "description": "stores the state in the Consul KV store at a given path.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/cos",
          "id": "backends.cos",
          "title": "cos",
          "description": "stores the state as an object in a configurable prefix in a given bucket on Tencent Cloud Object Storage (COS).",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/gcs",
          "id": "backends.gcs",
          "title": "gcs",
          "description": "stores the state as an object in a configurable prefix in a pre-existing bucket on Google Cloud Storage (GCS). The bucket must exist prior to configuring the backend.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/http",
          "id": "backends.http",
          "title": "http",
          "description": "stores the state using a simple REST client. State will be fetched via GET, updated via POST, and purged with DELETE. The method used for updating is configurable.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/kubernetes",
          "id": "backends.kubernetes",
          "title": "Kubernetes",
          "description": "stores the state in a Kubernetes secret.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/oss",
          "id": "backends.oss",
          "title": "oss",
          "description": "stores the state as a given key in a given bucket on Stores Alibaba Cloud OSS.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/pg",
          "id": "backends.pg",
          "title": "pg",
          "description": "stores the state in a Postgres database version 10 or newer.",
          "data": null
        },
        {
          "path": "/terraform/language/settings/backends/s3",
          "id": "backends.s3",
          "title": "s3",
          "description": "stores the state as a given key in a given bucket on Amazon S3.",
          "data": null
        }
      ]
    },
    {
      "baseUrl": "https://developer.hashicorp.com",
      "path": "/language/resources/provisioners",
      "id": "documentation.provisioners",
      "title": "Provisioners",
      "description": "execute specific actions on a local or remote host",
      "data": [
        {
          "path": "/terraform/language/resources/provisioners/file",
          "id": "provisioners.file_provisioner",
          "title": "File Provisioner",
          "description": "copy file to remote destinations via ssh or winrm",
          "data": null
        },
        {
          "path": "/terraform/language/resources/provisioners/local-exec",
          "id": "provisioners.local-exec_provisioner",
          "title": "Local-exec Provisioner",
          "description": "execute a script/command locally",
          "data": null
        },
        {
          "path": "/terraform/language/resources/provisioners/remote-exec",
          "id": "provisioners.remote-exec_provisioner",
          "title": "Remote-exec Provisioner",
          "description": "execute a command remotely via ssh or winrm",
          "data": null
        },
        {
          "path": "/terraform/language/resources/provisioners/syntax",
          "id": "provisioners.provisioner_syntax",
          "title": "Provisioner Syntax",
          "description": "basic syntax for declaring provisioners",
          "data": null
        },
        {
          "path": "/terraform/language/resources/provisioners/syntax",
          "id": "provisioners.provisioner_connections",
          "title": "Provisioner Connections",
          "description": "required by file and remote-exec provisioners",
          "data": null
        },
        {
          "path": "/terraform/language/resources/provisioners/syntax",
          "id": "provisioners.provisioner_without_a_resource",
          "title": "Provisioner without a Resource",
          "description": "execute provisioners without deploying a resource",
          "data": null
        }
      ]
    },
    {
      "baseUrl": "https://developer.hashicorp.com",
      "path": "/terraform/language/expressions",
      "id": "documentation.expressions",
      "title": "Expressions",
      "description": "expressions in terraform",
      "data": [
        {
          "path": "/terraform/language/expressions/type-constraints",
          "id": "expressions.type_constraints",
          "title": "Type Constraints",
          "description": "variable type constraints syntax",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/version-constraints",
          "id": "expressions.version_constraints",
          "title": "Version Constraints",
          "description": "version constraint syntax",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/splat",
          "id": "expressions.splat_expressions",
          "title": "Splat Expressions",
          "description": "var.list[*].id - concise way of accessing list attributes as a list",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/dynamic-blocks",
          "id": "expressions.dynamic_blocks",
          "title": "Dynamic Blocks",
          "description": "dynamically create nested blocks on resources based on a list or map",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/custom-conditions",
          "id": "expressions.custom_condition_checks",
          "title": "Custom Condition Checks",
          "description": "custom conditions with error-messages on variables, resources, and data-sources",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/strings",
          "id": "expressions.strings_and_templates",
          "title": "Strings and Templates",
          "description": "string interpolation and heredocs",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/function-calls",
          "id": "expressions.function_calls",
          "title": "Function Calls",
          "description": "function calls with arguments or expanding syntax (...arg)",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/for",
          "id": "expressions.for_expressions",
          "title": "For Expressions",
          "description": "transforming lists and maps with a for-Loop",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/conditionals",
          "id": "expressions.conditional_expressions",
          "title": "Conditional Expressions",
          "description": "conditional (ternary) operator",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/operators",
          "id": "expressions.operators",
          "title": "Operators",
          "description": "basic arithmetic, logical and comparison operators",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/types",
          "id": "expressions.types_and_values",
          "title": "Types and Values",
          "description": "basic types recognized by terraform",
          "data": null
        },
        {
          "path": "/terraform/language/expressions/references",
          "id": "expressions.references_to_values",
          "title": "References to Values",
          "description": "basic terraform Syntax, Identifiers and Resource Addressing",
          "data": null
        }
      ]
    },
    {
      "baseUrl": "https://developer.hashicorp.com",
      "path": "/language/meta-arguments",
      "id": "documentation.meta_arguments",
      "title": "Meta Arguments",
      "description": "resource meta-arguments",
      "data": [
        {
          "path": "/terraform/language/meta-arguments/for_each",
          "id": "meta_arguments.for_each",
          "title": "For Each",
          "description": "use a map or set to create several instances of a resource, data, module",
          "data": null
        },
        {
          "path": "/terraform/language/meta-arguments/count",
          "id": "meta_arguments.count",
          "title": "Count",
          "description": "use a number to create n-instances of a resource, data, module",
          "data": null
        },
        {
          "path": "/terraform/language/meta-arguments/module-providers",
          "id": "meta_arguments.module_provider",
          "title": "Module Provider",
          "description": "override default provider or add more providers on module-call",
          "data": null
        },
        {
          "path": "/terraform/language/meta-arguments/resource-provider",
          "id": "meta_arguments.resource_provider",
          "title": "Resource Provider",
          "description": "deploy a resource via a specfic provider",
          "data": null
        },
        {
          "path": "/terraform/language/meta-arguments/lifecycle",
          "id": "meta_arguments.lifecycle",
          "title": "Lifecycle",
          "description": "use lifecycle arguments on resources, such as ignore_changes, etc.",
          "data": null
        },
        {
          "path": "/terraform/language/meta-arguments/depends_on",
          "id": "meta_arguments.depends_on",
          "title": "Depends on",
          "description": "make resources *explicitly* dependent on each other",
          "data": null
        }
      ]
    }
  ]
}